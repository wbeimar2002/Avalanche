name: $(BuildNumberPrefix)-push-docker-image-$(MajorVersion).$(MinorVersion).$(Patch).$(ReleaseStage)_$(MajorVersion).$(MinorVersion).$(Date:yyMM).$(Date:dd)$(Rev:rr)_$(Date:yyyyMMdd)T$(Date:hhmmss)

trigger:
  - dev
  
resources:
  repositories:
  - repository: devops
    type: git
    name: devops
    ref: dev

#pool:
  #vmImage: $(PoolVmImage)

pool: $(pool)

variables:
  
  - group: 'vg-dev-avalanche-api'
  
  #- name: System.Debug
    #value: true
  
stages:

# stage for creating PR comments if nuget pkgs verssion are not up to date
- template: pipeline\templates\nuget-version-check.yml@devops

- stage: build

  jobs:

  - job: build_test_publish
    pool:
      name: ism-build-pool-on-prem
      ${{ if eq(variables['debug_build_configuration'],'true')}}:
      demands:
      - VC_Scan -equals YES   
    steps:
     
     - checkout: self
     - checkout: devops

     - powershell: |
          if( $Env:DEBUG_BUILD_CONFIGURATION -eq 'true')
          {
          $PS_Debug = "debug"
          write-host "BuildConfiguration="$PS_Debug
          Write-Host "##vso[task.setvariable variable=BuildConfiguration;]$PS_Debug"
          }
       displayName: Update BuildConfiguration
     - task: PowerShell@2
       displayName: List environmental variables
       inputs:
        targetType: 'inline'
        script: 'Get-ChildItem -Path Env:\'
 
     - task: PowerShell@1
       #condition: and(succeeded(),  ne(variables['Build.Reason'], 'PullRequest'))
       #condition: and(succeeded(), eq(variables['Build.SourceBranchName'], variables['TriggerBranch']))
       displayName: 'Apply Version To Application'
       inputs:
           scriptName: devops/misc-scripts/ApplyVersionToAssemblies.ps1

     - bash: |
        if [ "$(Build.Reason)" == "IndividualCI" ]; then
            echo "Disable tests"
            echo "##vso[task.setvariable variable=run_tests]false"
        else
            echo "Run tests"
            echo "##vso[task.setvariable variable=run_tests]true"
        fi
       displayName: set run_tests variable

     - template: 'pipeline\templates\restore-build-test-msbuild10.yml@devops'
       parameters: 
          repo: '$(Repo)'
          projectsolution: '$(ProjectSolution)'
          buildConfiguration: '$(BuildConfiguration)'
          buildplatform: '$(BuildPlatform)'
          vstsfeed: '$(VstsFeed)'
          adoproject: '$(AdoProject)'

     - powershell: |
            $ProjectPath='$(Repo)\Code\$(VsProjectNamePrefix)\$(VsProjectNamePrefix).csproj'
            Write-host "ProjectPath="$ProjectPath
            Write-Host "##vso[task.setvariable variable=ProjectPath;]$ProjectPath"

            $PublishPath='$(System.DefaultWorkingDirectory)\$(Repo)\Code\$(VsProjectNamePrefix)\publish'
            Write-host "PublishPath="$PublishPath
            Write-Host "##vso[task.setvariable variable=PublishPath;]$PublishPath"
       #condition: and(succeeded(),  ne(variables['Build.Reason'], 'PullRequest'))
       displayName: "Set/Print project/publish paths"

     - task: DotNetCoreCLI@2
       
       #condition: and(succeeded(), eq(variables['Build.SourceBranchName'], variables['TriggerBranch']))
       inputs:
         command: 'publish'
         publishWebProjects: false
         projects: $(ProjectPath)
         arguments: '--no-build -c $(BuildConfiguration) -o $(PublishPath)'
         zipAfterPublish: false 
         modifyOutputPath: false
       displayName: Publish $(VsProjectNamePrefix)
         
     - powershell: |
          $temp = "$(ImageName)"
          $temp = $temp.ToLower()
          Write-host "image name="$(ImageName)
          Write-Host "##vso[task.setvariable variable=ImageNameLowercase;]$temp"
       displayName: 'Set image name'
       condition: and(succeeded(),  ne(variables['Build.Reason'], 'PullRequest'))
     


   
     - bash: |
              acrname='acr$(env)$(AppPlatform)global'
              echo 'target acr name' $acrname
              echo "##vso[task.setvariable variable=acrname]$acrname"
       displayName: 'Set acr name'
       condition: and(succeeded(),  ne(variables['Build.Reason'], 'PullRequest'))

     - powershell: |
            $buildnumber_postfix=""
            $tag =""

            $buildnumber = $Env:BUILD_BUILDNUMBER
            
            $tempString=$buildnumber.split("_")
            $buildnumber_postfix = $tempString[1]
            
            if($buildnumber_postfix)
            {
            write-host "buildnumber_postfix="$buildnumber_postfix 
            Write-Host "##vso[task.setvariable variable=buildnumber_postfix;]$buildnumber_postfix"
            
            }
            else
            {
            Throw("buildnumber_postfix variable is empty")
            }

            $tag = $tempString[2]

            if($tag)
            {
            write-host "tag="$tag
            Write-Host "##vso[task.setvariable variable=tag;]$tag"
            
            }
            else
            {
            Throw("tag variable is empty")
            }

       displayName: "set/print tag buildnumber_postfix"
       condition: and(succeeded(),  ne(variables['Build.Reason'], 'PullRequest'))
   
       
     - template: 'pipeline\templates\acr-build-push-task.yml@devops'
       parameters: 
            azureSubscription: '$(AzureSubscription)'
            acrname:  '$(acrname)'
            imageNameLowercase: '$(ImageNameLowercase)'
            tag:  '$(tag)'
            dockerFile: '$(DockerFile)'
            workingDirectory: '$(WorkingDirectory)'
            repo: '$(Repo)'
        
     - task: CopyFiles@2
       condition: |
              and
              (
                eq(variables['Build.SourceBranchName'], 'dev'),
                ne(variables['Build.Reason'], 'PullRequest')
              )
       #condition: and(succeeded(),  ne(variables['Build.Reason'], 'PullRequest'))
       inputs:
        Contents: |
          $(Repo)/$(BinFolder)/**
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
       displayName: 'Copy Files to $(Build.ArtifactStagingDirectory)'
     
     - publish: '$(Build.ArtifactStagingDirectory)/$(Repo)/$(BinFolder)'
       condition: |
              and
              (
                eq(variables['Build.SourceBranchName'], 'dev'),
                ne(variables['Build.Reason'], 'PullRequest')
              )
       #condition: and(succeeded(),  ne(variables['Build.Reason'], 'PullRequest'))
       artifact: drop
     
     # %AZURE_DEVOPS_CLI_PAT% on Windows when using script
     - script: echo %AZURE_DEVOPS_CLI_PAT% | az devops login
       condition: and(succeeded(), eq(variables['auto_deploy'], 'true'))
       env:
         AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
       displayName: 'Login Azure DevOps Extension'
       
     - task: PowerShell@2
       condition: and(succeeded(), eq(variables['auto_deploy'], 'true'))
       inputs:
         targetType: 'inline'
         script: |
          az pipelines build queue --definition-id $(CIBuildId) --detect --branch  $(BranchForMainBuild) --org $(AdoInstanceUrl) -p $(AdoProject)
       displayName: "Run Avalanche build"
       
     - template: 'pipeline\templates\veracode-agent-scan.yml@devops'

- stage: te_archive
  dependsOn: build
  condition: |
        and
        (
          succeeded(),
          eq(variables['te_archive'], 'true'),
          ne(variables['Build.Reason'], 'PullRequest')
        )
 
  
  jobs:
  - job: publish

    pool:
      name: 'ism-build-pool-on-prem'
      demands:
        - msbuild
       
    steps:
    - checkout: devops
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Pipeline Artifact'
      inputs:
        source: 'current'
        artifactName: drop
        targetPath: '$(System.DefaultWorkingDirectory)\drop'
        
    - powershell: |
          write-host "PS Build Config="$DEBUG_BUILD_CONFIGURATION
          if( $Env:DEBUG_BUILD_CONFIGURATION -eq 'true')
          {
          $PS_SubPath = "VeraCode"
          write-host "NetworkSubPath="$PS_SubPath
          Write-Host "##vso[task.setvariable variable=NetworkSubPath;]$PS_SubPath"
          }
      displayName: Check BuildConfiguration

    - template: 'pipeline\templates\copy-release-to-network-share-v2.yml@devops'
      parameters: 
        adoProject: '$(AdoProject)'
        vsProjectNamePrefix: '$(VsProjectNamePrefix)'
        networkShare: '$(NetworkShare)'
        networkSubPath: '$(NetworkSubPath)'
        networkUser: '$(NetworkUser)'
        networkPassword: '$(NetworkPassword)'
        builidNumber: '$Env:BUILD_BUILDNUMBER'
        copyTrue: '$(copy_to_network_share)'  
        
- stage: te_octopus
  dependsOn: build
  condition: |
        and
        (
          succeeded(),
          eq(variables['te_octopus'], 'true'),
          ne(variables['Build.Reason'], 'PullRequest')
        )
  #condition: and(succeeded(), eq(variables['te_octopus'], 'true'))
  
  jobs:
  - job: publish

    pool:
      name: ism-build-pool-on-prem
      demands:
      - msbuild
       
    steps:
    - checkout: devops

    - task: DownloadPipelineArtifact@2
      displayName: Download Pipeline Artifact
      inputs:
        source: current
        artifactName: drop
        targetPath: $(System.DefaultWorkingDirectory)\drop
        
    - powershell: |
            $buildnumber_postfix=""
            $tag =""

            $buildnumber = $Env:BUILD_BUILDNUMBER
            
            $tempString=$buildnumber.split("_")
            $buildnumber_postfix = $tempString[1]
            
            if($buildnumber_postfix)
            {
            write-host "buildnumber_postfix="$buildnumber_postfix 
            Write-Host "##vso[task.setvariable variable=PackageVersion;]$buildnumber_postfix"
            
            }
            else
            {
            Throw("buildnumber_postfix variable is empty")
            }

      displayName: "set/print PackageVersion"
      condition: and(succeeded(),  ne(variables['Build.Reason'], 'PullRequest'))
   
    - template: 'pipeline\templates\create-push-octopus-release.yml@devops'
      parameters: 
        octopusProject: '$(OctopusProject)'
        octopusPackageId: '$(OctopusPackageId)'
        packageVersion: '$(PackageVersion)'
        
