trigger:
  - dev
  
resources:
  repositories:
  - repository: devops
    type: git
    name: devops
    ref: fix-tests

#pool:
  #vmImage: $(PoolVmImage)

pool: $(pool)

variables:
  
  - group: 'vg-dev-avalanche-api'
  
  #- name: System.Debug
    #value: true
name: $(BuildNumberPrefix)-$(MajorVersion).$(MinorVersion).$(Patch).$(ReleaseStage)_$(MajorVersion).$(MinorVersion).$(Date:yyMM).$(Date:dd)$(Rev:rr)_$(Date:yyyyMMdd)T$(Date:hhmmss)

stages:

# stage for creating PR comments if nuget pkgs verssion are not up to date
- template: pipeline\templates\nuget-version-check.yml@devops

- stage: build

  jobs:

  - job: build_test_publish
    steps:
     
     - checkout: self
     - checkout: devops

     - task: PowerShell@2
       displayName: List environmental variables
       inputs:
        targetType: 'inline'
        script: 'Get-ChildItem -Path Env:\'
 
     - task: PowerShell@1
       displayName: 'Apply Version To Application'
       inputs:
           scriptName: devops/misc-scripts/ApplyVersionToAssemblies.ps1

     - template: 'pipeline\templates\restore-build-test-msbuild6.yml@devops'
       parameters: 
          repo: '$(Repo)'
          projectsolution: '$(ProjectSolution)'
          buildConfiguration: '$(BuildConfiguration)'
          buildplatform: '$(BuildPlatform)'
          vstsfeed: '$(VstsFeed)'
          adoproject: '$(AdoProject)'
          sonarprojectkey: '$(SonarProjectKey)'
          sonarprojetname: '$(SonarProjectKey)'
 
     - template: 'pipeline\templates\pub-sonarqube-codecoverage-win-2.yml@devops'
       parameters: 
          buildnumberprefix: '$(BuildNumberPrefix)'
          sonarqubeurl: '$(SonarqubeUrl)'
          sonartoken: '$(SonarToken)'
          workingdirectory: '$(repo)'
          systemworkingdirectory: '$(System.DefaultWorkingDirectory)'

     - task: CopyFiles@2
       condition: and(succeeded(),  ne(variables['Build.Reason'], 'PullRequest'))
       inputs:
        Contents: |
          $(Repo)/$(BinFolder)/**
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
       displayName: 'Copy Files to $(Build.ArtifactStagingDirectory)'
     
     - task: PublishPipelineArtifact@1
       condition: and(succeeded(),  ne(variables['Build.Reason'], 'PullRequest'))
       inputs:
         targetPath: '$(Pipeline.Workspace)'
         artifact: 'drop'
         publishLocation: 'pipeline'
       displayName: 'Pub pipeline art'

- stage: publish_te
  dependsOn: build
  condition: and(succeeded(), eq(variables['publish_te'], 'true'))
  
  jobs:
  - job: publish

    pool:
      name: 'ism-build-pool-on-prem'
      demands: 
        - msbuild
       
    steps:
    - checkout: devops
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Pipeline Artifact'
      inputs:
        source: 'current'
        artifactName: drop
        targetPath: '$(System.DefaultWorkingDirectory)\drop'

    - template: 'pipeline\templates\create-push-octopus-release1.yml@devops'
      parameters: 
        octopusBaseURL: '$(OctopusBaseURL)'
        octopusAPIKey: '$(OctopusAPIKey)'
        octopusSpaceName: '$(OctopusSpaceName)'
        octopusEnvironmentName: '$(OctopusEnvironmentName)'
        octopusChannelName: '$(OctopusChannelName)'
        octopusProject: '$(OctopusProject)'
        octopusPackageId: '$(OctopusPackageId)'
        triggerBranch: 'dev'
       
    - template: 'pipeline\templates\copy-release-to-network-share.yml@devops'
      parameters: 
        adoProject: '$(AdoProject)'
        vsProjectNamePrefix: '$(VsProjectNamePrefix)'
        networkShare: '$(NetworkShare)'
        networkSubPath: '$(NetworkSubPath)'
        networkUser: '$(NetworkUser)'
        networkPassword: '$(NetworkPassword)'
        builidNumber: '$Env:BUILD_BUILDNUMBER'
        copyTrue: '$(copy_to_network_share)'  
