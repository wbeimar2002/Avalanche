name: $(build_number_prefix)-$(majorversion).$(minorversion).$(patch).$(Releasestage)_$(majorversion).$(minorversion).$(Date:yyMM).$(Date:dd)$(Rev:rr)

resources:

  repositories:

  - repository: devops
    type: git
    name: devops
    ref: generelize-template-for-test-root

#pool: #'ism-build-pool-on-prem'
  
  # use only ubuntu-latest
  #vmImage: '$(pool_vm_image)'

variables:

  - group: 'vg-dev-avalanche-security-server'
  
stages:

# stage for creating PR comment if nuget pkgs verssion not up to date
- template: pipeline\templates\nuget-version-check.yml@devops

- stage: build

  jobs:

  - job: build_test_publish
    
    pool:
    
      vmImage: '$(pool_vm_image)'
    
    steps:
     
     - checkout: self
     - checkout: devops
 
     - task: PowerShell@2
       displayName: List environmental variables
       inputs:
        targetType: 'inline'
        script: 'Get-ChildItem -Path Env:\'

     - template: 'pipeline\templates\restore-build-test-msbuild4.yml@devops'
       parameters: 
          repo: '$(Repo)'
          projectsolution: '$(ProjectSolution)'
          buildConfiguration: '$(BuildConfiguration)'
          buildplatform: '$(BuildPlatform)'
          vstsfeed: '$(VstsFeed)'
          adoproject: '$(AdoProject)'
          testprojects: '$(TestProjects)'
          sonarprojectkey: '$(SonarProjectKey)'
          sonarprojetname: '$(SonarProjectKey)'

     #- template: 'pipeline\coverage\publish_ado_code_coverage-3.yml@devops'

     # make app artifacts
     - task: DotNetCoreCLI@2
       displayName: 'Publish project'
       inputs:
        command: publish
        publishWebProjects: false
        projects: '$(CsProject)'
        arguments: '-c $(BuildConfiguration)  -o publish'
        zipAfterPublish: false
        modifyOutputPath: false

     # store artifacts
     - task: PublishBuildArtifacts@1
       displayName: 'Publish Build Artifacts'
       inputs:
        PathtoPublish: '$(PathtoApp)'
        ArtifactName: '$(PathtoApp)'

    
- stage: push_to_acr
  condition: |
        and
        (
          eq(variables['Build.SourceBranchName'], 'dev'),
          eq(variables['push_to_acr'], 'true')
        )
#condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))
  jobs:
   - job: push
    
     steps:  
     - checkout: self
     - checkout: devops
     
     - task: DownloadBuildArtifacts@0
       displayName: 'Download Build Artifacts'
       inputs:
        artifactName: $(PathtoApp)
        downloadPath: '.'
     
     - powershell: |
        $temp = "$(ImageName)"
        $temp = $temp.ToLower()
        Write-Host "##vso[task.setvariable variable=ImageNameLowercase;]$temp"
       displayName: 'Set image name'
     
     - task: Docker@0
       displayName: 'Docker command -Build'
       inputs:
        action: 'Run a Docker command'
        customCommand: 'build -t $(ImageNameLowercase) . -f $(DockerFile)' 
     
     - bash: |
        acrname='acr$(env)$(AppPlatform)global'
        echo 'target acr name' $acrname
        echo "##vso[task.setvariable variable=acrname]$acrname"
       displayName: 'Set acr name'

     - powershell: |
          $tag =""
          $buildnumber = $Env:BUILD_BUILDNUMBER
          write-host "buildnumber="$buildnumber 
          $tempString=$buildnumber.split("_")
          $tag = $tempString[1]
          
          if($tag)
          {
          write-host "tag="$tag 
          Write-Host "##vso[task.setvariable variable=tag;]$tag"
          }
          else
          {
          Throw("package version variable is empty")
          }
       displayName: "Set environment variable tag number"

     - task: Docker@2
       displayName: 'Docker image -Tag'
       inputs:
        command: 'tag'
        arguments: '$(ImageNameLowercase) $(acrname).azurecr.io/$(ImageNameLowercase):$(tag)'
        addPipelineData: false
     
     - task: Docker@2
       displayName: 'Docker image -Tag w/ latest'
       inputs:
          command: 'tag'
          arguments: '$(ImageNameLowercase) $(acrname).azurecr.io/$(ImageNameLowercase):latest'
          addPipelineData: false

     # get ip so acr can give access for push
     # ip of the router if server is behing a firewall
     - bash: |
        source devops/common/commonfunctions.sh
        ip=$(get_ext_ip)
        echo 'build server external ip is ' $ip
        echo "##vso[task.setvariable variable=ip]$ip"
        echo 'variable ip ' $(ip)
       displayName: 'Get build server external ip'

     - task: AzureCLI@1
       displayName: 'Add build server external ip to acr firewall'
       inputs:
        azureSubscription: $(azuresubscription)
        scriptPath: 'devops/resources/add-acr-firewall-ip.sh'
        arguments: '$(azuresubscription) $(acrname) $(ip)'

     - task: Docker@1
       displayName: 'Docker push'
       inputs:
        azureSubscriptionEndpoint: $(azuresubscription)
        azureContainerRegistry: '$(acrname).azurecr.io'
        command: 'Push an image'
        imageName: '$(acrname).azurecr.io/$(ImageNameLowercase):$(tag)'

     - task: Docker@1
       displayName: 'Docker push'
       inputs:
        azureSubscriptionEndpoint: $(azuresubscription)
        azureContainerRegistry: '$(acrname).azurecr.io'
        command: 'Push an image'
        imageName: '$(acrname).azurecr.io/$(ImageNameLowercase):latest'
        
     - task: AzureCLI@1
       displayName: 'Delete build server external ip from acr firewall'
       inputs:
        azureSubscription: $(azuresubscription)
        scriptPath: 'devops/resources/delete-acr-firewall-ip.sh'
        arguments: '$(azuresubscription) $(acrname) $(ip)'        

- stage: octopus_release
  dependsOn: push_to_acr
  condition: |
        and
        (
          eq(variables['Build.SourceBranchName'], 'dev'),
          eq(variables['publish_te'], 'true')
        )

  jobs:
   - job: push
    
     steps:  

     - task: PowerShell@2
       inputs:
         targetType: 'inline'
         script: |
           # Write your PowerShell commands here.
           
           Write-Host "Hello World"

     - powershell: |
          $package_version =""
          $buildnumber = $Env:BUILD_BUILDNUMBER
          #e.g $releaseName = "avalanchec-dicom-1.0.0.0_20.3.30.02"
          write-host "buildnumber="$buildnumber 
          $tempString=$buildnumber.split("_")
          $package_version = $tempString[1]
          
          if($package_version)
          {
          write-host "package version="$package_version 
          Write-Host "##vso[task.setvariable variable=PackageVersion;]$package_version"
          }
          else
          {
          Throw("package version variable is empty")
          }
       displayName: "Set environment variable package number"

     - powershell: |
        write-host "package version="$ENV:PACKAGEVERSION
       displayName: 'Print package version'
       
     - task: octopusdeploy.octopus-deploy-build-release-tasks.octopus-create-release.OctopusCreateRelease@4
       displayName: 'Create Octopus Release'
       inputs:
        OctoConnectedServiceName: 'Octopus Server'
        Space: 'Default'
        ProjectName: '$(OctopusProject)'
        ReleaseNumber: '$(PackageVersion)'
        #Channel: 'Channels-167'