trigger:
- api-tests
 
# variables:
  #system.debug: true
  #disable.coverage.autogenerate: true

pool:
  vmImage: 'ubuntu-latest'
 
steps:

- script: >-
    echo "##vso[task.prependpath]$HOME/.dotnet/tools"

- script: >-
    dotnet tool install -g dotnet-reportgenerator-globaltool

- script: >-
    sh Code/codecoverage.sh 'Code/Avalanche.Api.Tests/Avalanche.Api.Tests.csproj' 'release' '$(Agent.TempDirectory)/TestResults/api'

- script: >-
    sh Code/codecoverage.sh 'Code/Avalanche.Security.Server.Tests/Avalanche.Security.Server.Tests.csproj' 'release' '$(Agent.TempDirectory)/TestResults/security'

- script: >-
    ls $(Agent.TempDirectory)/TestResults

- script: >-
    reportgenerator "-reports:$(Agent.TempDirectory)/TestResults/api.cobertura.xml;$(Agent.TempDirectory)/TestResults/security.cobertura.xml" "-targetdir:$(Agent.TempDirectory)/coveragereport" -reporttypes:xml

- script: >-
    ls $(Agent.TempDirectory)/coveragereport
#- task: reportgenerator@4
  #inputs:
    #reports: **/coverage.cobertura.xml;artifact/**/cobertura-coverage.xml
    #targetdir: $(Pipeline.Workspace)/coveragereport



- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: "Cobertura"
    summaryFileLocation: '$(Agent.TempDirectory)/coveragereport/Summary.xml'

# single report working
#- task: PublishCodeCoverageResults@1
  #inputs:
            #codeCoverageTool: 'Cobertura'
            #summaryFileLocation: '$(Agent.TempDirectory)/TestResults/api.cobertura.xml'
            #failIfCoverageEmpty: true
