trigger:
   branches:
    include:
      - dev
   paths:
    include:
      - Code/Avalanche.Security.Server.Client/*
      - Protos/*

variables:
  - group: 'rg-nuget-avalanche-security-server-client'
  
resources:
  repositories:
  - repository: devops
    type: git
    name: devops
    ref: dev

name: $(BuildNumberPrefix)-$(MajorVersion).$(MinorVersion).$(Patch).$(ReleaseStage)_$(MajorVersion).$(MinorVersion).$(Date:yyMM).$(Date:dd)$(Rev:rr)

#todo - create conditional templates whether to point to pool - on-premises pool or hosted agent       
pool:
    vmImage: $(AgentPoolAzurePipelineImage)

stages:

# stage build
- stage: build
  displayName: 'Build & Publish Package'

  jobs:
 
  - job: 'Build_package_publish'
    displayName: 'Job - Build'

    steps:

      - checkout: self
      - checkout: devops
      
      - task: PowerShell@2
        displayName: List environmental variables
        inputs:
          targetType: 'inline'
          script: 'Get-ChildItem -Path Env:\'
      
      - bash: |
            if [ "$(Build.Reason)" == "IndividualCI" ]; then
                echo "##vso[task.setvariable variable=triggered_build;]true"
                echo "##vso[task.setvariable variable=publish_nuget_version_tofeed;]true"
            fi
        displayName: 'Set flags'
        condition: and(succeeded(), eq(variables['build.reason'], 'IndividualCI'))    
       
      - bash: |
            echo "triggered_build = "$(triggered_build)
            echo "publish_nuget_version_tofeed = "$(publish_nuget_version_tofeed)
            echo "build reason = "$(Build.Reason)
        displayName: 'Print flags & Build.Reason'  
        

      - task: PowerShell@1
        displayName: 'Apply Version To Application'
        inputs:
           scriptName: devops/misc-scripts/ApplyVersionToAssemblies.ps1     
        condition: and(succeeded(), eq(variables['build.reason'], 'IndividualCI'))  

      - template: 'pipeline/templates/restore-build-test-msbuild5.yml@devops'    
        parameters:
          repo: '$(Repo)'
          adoProject: '$(AdoProject)'
          projectSolution: '$(ProjectSolution)'
          project: '$(Project)'
          buildConfiguration: '$(BuildConfiguration)'
          buildPlatform: '$(BuildPlatform)'
          nugetFilenamePrefix: '$(NugetFilenamePrefix)' 
          vstsFeed: '$(VstsFeed)'
          adoIntanceUrl: '$(AdoInstanceUrl)'
          publishToFeed: 'nuget_version'
         
      - task: CopyFiles@2
        condition: and(succeeded(), eq(variables['publish_nuget_version_tofeed'], true))
        displayName: 'Copy Files to $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)\$(Repo)\$(BinFolder)'
          Contents: |
            **/*
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
      
      - publish: '$(Build.ArtifactStagingDirectory)'
        condition: and(succeeded(), eq(variables['publish_nuget_version_tofeed'], true))
        artifact: drop   


