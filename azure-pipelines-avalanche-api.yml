name: $(build_number_prefix)-$(majorversion).$(minorversion).$(patch).$(Releasestage)_$(majorversion).$(minorversion).$(Date:yyMM).$(Date:dd)$(Rev:rr)

resources:

  repositories:

  - repository: devops
    type: git
    name: devops
    ref: nh-pipeline-add-restore-build-test-yml

pool:

  vmImage: '$(pool_vm_image)'

variables:

  - group: 'vg-dev-avalanche-api'
  
stages:

- stage: build

  jobs:

  - job: build_test_publish
    
    pool:

      vmImage: '$(pool_vm_image)'
    
    steps:
     
     - checkout: self
     - checkout: devops

    # resore solution

     - task: UseDotNet@2
       displayName: 'use dotnet 3.1.x'
       inputs:
        version: '3.1.x'
        packageType: runtime
        
     - task: UseDotNet@2
       displayName: 'use dotnet 2.2.x'
       inputs:
        version: '2.2.x'
        packageType: runtime

     - task: NuGetCommand@2
       displayName: 'NuGet restore **/*.sln'
       inputs:
          restoreSolution: 'avalanche-api/Code/Avalanche.Api.sln'
          feedsToUse: 'select'
          vstsFeed: '$(VstsFeed)'

    # sonar 1 of 3
     - task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
       condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))
       displayName: 'Prepare analysis on SonarQube'
       inputs:
          SonarQube: sonarqube
          projectKey: 'avalanche-api'
          projectName: 'avalanche-api'
       
     

     # build solution
     - task: VSBuild@1
       displayName: 'Build solution Code/Avalanche.Api.sln'
       inputs:
        solution: avalanche-api/Code/Avalanche.Api.sln
        msbuildArgs: '/p:Configuration=Avalanche-Api-Sonar'
        clean: true

     #- task: MSBuild@1
       #displayName: 'Build solution Code/Avalanche.Api.sln'
       #inputs:
        #solution: 'avalanche-api/Code/Avalanche.Api.sln'
        #msbuildArguments: '/p:Configuration=Avalanche-Api-Sonar'

     #- task: DotNetCoreCLI@2
       #displayName: 'dotnet build **/*.sln'
       #inputs:
          #projects: '$(ProjectSolution)'
          ##arguments: '/p:Configuration=release'
          ##arguments: '--configuration=Avalanche-Api-Sonar'
          #arguments: '-c release'
          #vstsFeed: '$(VstsFeed)'
          ##configuration: 'release'
     
     # test project 
     - task: DotNetCoreCLI@2
       displayName: 'dotnet test'
       inputs:
        command: test
        projects: '$(TestProject)'
        testRunTitle: TestResults
        workingDirectory: avalanche-api/Code/Avalanche.Api.Tests
        vstsFeed: '$(VstsFeed)'
     
     - task: CopyFiles@2
       displayName: 'Copy Files to: $(Agent.BuildDirectory)\TestResults'
       inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: '*.trx'
        TargetFolder: '$(Agent.BuildDirectory)\TestResults'
    
     - task: CopyFiles@2
       displayName: 'Copy Files to: $(Agent.BuildDirectory)\TestResults'
       inputs:
          SourceFolder: '$(Agent.TempDirectory)'
          Contents: '*.trx'
          TargetFolder: '$(Agent.BuildDirectory)\TestResults'
     
     # sonar 2 of 3
     - task: SonarQubeAnalyze@4
       condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))

    # sonar 3 of 3
     - task: SonarQubePublish@4
       condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))
       inputs:
        pollingTimeoutSec: '300'
  

    # make artifacts
     - task: DotNetCoreCLI@2
       displayName: 'Publish Avalanche.Api'
       inputs:
        command: publish
        publishWebProjects: false
        projects: '$(CsProject)'
        arguments: '-c $(BuildConfiguration)  -o app'
        zipAfterPublish: false
        modifyOutputPath: false

    # store artifacts
     - task: PublishBuildArtifacts@1
       displayName: 'Publish Build Artifacts'
       inputs:
        PathtoPublish: '$(PathtoPublish)'
        ArtifactName: '$(PathtoPublish)'


- stage: dev
  #condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))
  jobs:
     - job: push
       
       #variables:

       #- template: vg-dev-avalanche-api.yml

       steps:  
       - checkout: self
       - checkout: devops
       #- checkout: avalanche-api
       #- checkout: devops
       
       - task: DownloadBuildArtifacts@0
         displayName: 'Download Build Artifacts'
         inputs:
          artifactName: $(PathtoPublish)
          downloadPath: '.'
       
       - powershell: |
          $temp = "$(ImageName)"
          $temp = $temp.ToLower()
          Write-Host "##vso[task.setvariable variable=ImageNameLowercase;]$temp"
         displayName: 'Set image name'
       
       - task: Docker@0
         displayName: 'Docker command -Build'
         inputs:
          action: 'Run a Docker command'
          customCommand: 'build -t $(ImageNameLowercase) . -f avalanche-api/Code/Avalanche.Api/DokerfileForAdoPipeline' 
       
       - bash: |
          acrname='acr$(env)$(platform)global'
          echo 'target acr name' $acrname
          echo "##vso[task.setvariable variable=acrname]$acrname"
         displayName: 'Set acr name'

       - task: Docker@2
         displayName: 'Docker command -Tag'
         inputs:
          command: 'tag'
          arguments: '$(ImageNameLowercase) $(acrname).azurecr.io/$(ImageNameLowercase):$(Build.BuildNumber)'
          #arguments: '$(ImageNameLowercase) $(AcrRepository).azurecr.io/$(ImageNameLowercase):$(Build.BuildNumber)'
          addPipelineData: false
       
       - bash: |
          source devops/common/commonfunctions.sh
          ip=$(get_ext_ip)
          echo 'build server external ip is ' $ip
          echo "##vso[task.setvariable variable=ip]$ip"
          echo 'variable ip ' $(ip)
         displayName: 'Get build server external ip'

       
       - task: AzureCLI@1
         displayName: 'Add build server external ip to acr firewall'
         inputs:
          azureSubscription: $(azuresubscription)
          scriptPath: 'devops/resources/add-acr-firewall-ip.sh'
          arguments: '$(azuresubscription) $(acrname) $(ip)'
          #arguments: '$(azuresubscription) $(AcrRepository) $(ip)'

       - task: Docker@1
         displayName: 'Run a Docker command -Push'
         inputs:
          azureSubscriptionEndpoint: $(azuresubscription)
          azureContainerRegistry: '$(acrname).azurecr.io'
          #azureContainerRegistry: '$(AcrRepository).azurecr.io'
          command: 'Push an image'
          imageName: '$(acrname).azurecr.io/$(ImageNameLowercase):$(Build.BuildNumber)'
          #imageName: '$(AcrRepository).azurecr.io/$(ImageNameLowercase):$(Build.BuildNumber)'

       - task: AzureCLI@1
         displayName: 'Delete build server external ip from acr firewall'
         inputs:
          azureSubscription: $(azuresubscription)
          scriptPath: 'devops/resources/delete-acr-firewall-ip.sh'
          arguments: '$(azuresubscription) $(acrname) $(ip)'
          #arguments: '$(azuresubscription) $(AcrRepository) $(ip)'

       