name: $(Date:yyyyMMdd)$(Rev:.rr)

resources:
  repositories:
  
  - repository: avalanche-api
    type: git
    name: avalanche/avalanche-api
    ref: dev

  - repository: devops
    type: git
    name: avalanche/devops

pool:
  vmImage: 'windows-latest'

variables:

  - template: pipeline-bug-workaround.yml
  - name: BuildConfiguration
    value: 'Release'

stages:
- stage: build
  jobs:
  - job: build_test_publish
    steps:

     - task: NuGetCommand@2
       displayName: 'NuGet restore'
       inputs:
          vstsFeed: '0b214fa2-b3b1-42b0-b0e3-ab1d83cc701f/a3df6df2-e351-48be-9590-ce52438af6bc'
     #- task: UseDotNet@2
       #displayName: 'use dotnet 3.1.x'
       #inputs:
        #version: '3.1.x'
        #packageType: runtime
        
     #- task: UseDotNet@2
       #displayName: 'use dotnet 2.2.x'
       #inputs:
        #version: '2.2.x'
        #packageType: runtime

     - task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
       displayName: 'Prepare analysis on SonarQube'
       inputs:
          SonarQube: sonarqube
          projectKey: 'avalanche-api'
          projectName: 'avalanche-api'
       condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))

     - task: DotNetCoreCLI@2
       displayName: 'dotnet build'
       inputs:
        projects: Code/Avalanche.Api.sln
        arguments: '--configuration=Avalanche-Api-Sonar'
        vstsFeed: '0b214fa2-b3b1-42b0-b0e3-ab1d83cc701f/a3df6df2-e351-48be-9590-ce52438af6bc'

     
     - task: DotNetCoreCLI@2
       displayName: 'dotnet test'
       inputs:
        command: test
        projects: Code/Avalanche.Api.Tests/Avalanche.Api.Tests.csproj
        testRunTitle: TestResults
        workingDirectory: Code/Avalanche.Api.Tests
        vstsFeed: '0b214fa2-b3b1-42b0-b0e3-ab1d83cc701f/a3df6df2-e351-48be-9590-ce52438af6bc'
     
     - task: CopyFiles@2
       displayName: 'Copy Files to: $(Agent.BuildDirectory)\TestResults'
       inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: '*.trx'
        TargetFolder: '$(Agent.BuildDirectory)\TestResults'

     #- task: DotNetCoreCLI@2
       #displayName: 'dotnet test Avalanche.Api.Tests.csproj'
       #inputs:
        #command: test
        #projects: Code/Avalanche.Api.Tests/Avalanche.Api.Tests.csproj
        #testRunTitle: TestResults
        #workingDirectory: Code/Avalanche.Api.Tests
    
     - task: CopyFiles@2
       displayName: 'Copy Files to: $(Agent.BuildDirectory)\TestResults'
       inputs:
          SourceFolder: '$(Agent.TempDirectory)'
          Contents: '*.trx'
          TargetFolder: '$(Agent.BuildDirectory)\TestResults'
     
     - task: SonarQubeAnalyze@4
       condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))

    
     - task: SonarQubePublish@4
       condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))
       inputs:
        pollingTimeoutSec: '300'

     - task: DotNetCoreCLI@2
       displayName: 'Publish Avalanche.Api'
       inputs:
        command: publish
        publishWebProjects: false
        projects: '**/Code/Avalanche.Api/Avalanche.Api.csproj'
        arguments: '-c $(BuildConfiguration)  -o app'
        zipAfterPublish: false
        modifyOutputPath: false
 
     - task: PublishBuildArtifacts@1
       displayName: 'Publish Build Artifacts'
       inputs:
        PathtoPublish: 'app'
        ArtifactName: app 


- stage: dev
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))
  jobs:
     - job: push
       
       variables:

       - template: vg-dev-avalanche-api.yml

       steps:  
       - checkout: avalanche-api
       - checkout: devops
       
       - task: DownloadBuildArtifacts@0
         displayName: 'Download Build Artifacts'
         inputs:
          artifactName: app
          downloadPath: '.'
       
       - powershell: |
          $temp = "$(ImageName)"
          $temp = $temp.ToLower()
          Write-Host "##vso[task.setvariable variable=ImageNameLowercase;]$temp"
         displayName: 'Set image name'
       
       - task: Docker@0
         displayName: 'Docker command -Build'
         inputs:
          action: 'Run a Docker command'
          customCommand: 'build -t $(ImageNameLowercase) . -f avalanche-api/Code/Avalanche.Api/DokerfileForAdoPipeline' 
       
       - bash: |
          acrname='acr$(env)$(platform)global'
          echo 'target acr name' $acrname
          echo "##vso[task.setvariable variable=acrname]$acrname"
         displayName: 'Set acr name'

       - task: Docker@2
         displayName: 'Docker command -Tag'
         inputs:
          command: 'tag'
          arguments: '$(ImageNameLowercase) $(acrname).azurecr.io/$(ImageNameLowercase):$(Build.BuildNumber)'
          #arguments: '$(ImageNameLowercase) $(AcrRepository).azurecr.io/$(ImageNameLowercase):$(Build.BuildNumber)'
          addPipelineData: false
       
       - bash: |
          source devops/common/commonfunctions.sh
          ip=$(get_ext_ip)
          echo 'build server external ip is ' $ip
          echo "##vso[task.setvariable variable=ip]$ip"
          echo 'variable ip ' $(ip)
         displayName: 'Get build server external ip'

       
       - task: AzureCLI@1
         displayName: 'Add build server external ip to acr firewall'
         inputs:
          azureSubscription: $(azuresubscription)
          scriptPath: 'devops/resources/add-acr-firewall-ip.sh'
          arguments: '$(azuresubscription) $(acrname) $(ip)'
          #arguments: '$(azuresubscription) $(AcrRepository) $(ip)'

       - task: Docker@1
         displayName: 'Run a Docker command -Push'
         inputs:
          azureSubscriptionEndpoint: $(azuresubscription)
          azureContainerRegistry: '$(acrname).azurecr.io'
          #azureContainerRegistry: '$(AcrRepository).azurecr.io'
          command: 'Push an image'
          imageName: '$(acrname).azurecr.io/$(ImageNameLowercase):$(Build.BuildNumber)'
          #imageName: '$(AcrRepository).azurecr.io/$(ImageNameLowercase):$(Build.BuildNumber)'

       - task: AzureCLI@1
         displayName: 'Delete build server external ip from acr firewall'
         inputs:
          azureSubscription: $(azuresubscription)
          scriptPath: 'devops/resources/delete-acr-firewall-ip.sh'
          arguments: '$(azuresubscription) $(acrname) $(ip)'
          #arguments: '$(azuresubscription) $(AcrRepository) $(ip)'

       