// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";
import { group } from "k6";
import http from 'k6/http';
import { check, fail } from 'k6';

export let options = { maxRedirects: 4, iterations: "10" };

const Pre = Symbol.for("pre");
const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    ADMIN_USR: "admin@admin.com",
    ADMIN_PASS: "12345678",
    LOGIN_URL: "https://localhost:6001/api/login"
  }
});

export default function() {
  postman[Pre].push(() => {
    
    var currentToken = pm.environment.get("CURRENT_ACCESS_TOKEN");

    if (currentToken === undefined) {

      //https://k6.io/docs/using-k6/http-requests
      var url = pm.environment.get("LOGIN_URL");
      var payload = JSON.stringify({
        email: pm.environment.get("ADMIN_USR"),
        password: pm.environment.get("ADMIN_PASS")
      });

      var params = {
        headers: {
          'Content-Type': 'application/json',
        },
      };

      var res = http.post(url, payload, params);

      // Verify that we ended up on the user page
      check(res, {
        'login succeeded': 'OK'
      }) || fail('login failed');

      //https://k6.io/docs/javascript-api/k6-http/response-k6-http
      //console.log("Saving the token");
      var responseJson = res.json();
      //console.log("Token: " + responseJson.accessToken);

      pm.environment.set(
        "CURRENT_ACCESS_TOKEN",
        responseJson.accessToken
      );
    }
    
  });

  group("Setup", function() {
    postman[Request]({
      name: "Get Physicians",
      id: "119a7843-1fd4-4dcc-8c3e-3f5bb85622d1",
      method: "GET",
      address: "https://localhost:5001/Physicians",
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Search Patient Filtered Details",
      id: "1ed4b7b5-ad4b-409d-b3d4-9a6d1e0ea2cd",
      method: "POST",
      address: "https://localhost:5001/Patients/filteredDetailed",
      data: '{"roomName":"Sorey","page":0,"limit":10}',
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "content-type": "application/json",
        origin: "https://localhost:5001",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Contains data for paging", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.have.a.property("items");
          pm.expect(jsonData).to.have.a.property("nextPage");
          pm.expect(jsonData).to.have.a.property("previousPage");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Search Patient by Keyword",
      id: "2b3fe67e-2f9d-4f59-ac71-1004fffe6a52",
      method: "POST",
      address: "https://localhost:5001/Patients/filtered",
      data: '{"term":"","page":0,"limit":10}',
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "content-type": "application/json",
        origin: "https://localhost:5001",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Contains data for paging", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.have.a.property("items");
          pm.expect(jsonData).to.have.a.property("nextPage");
          pm.expect(jsonData).to.have.a.property("previousPage");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Quick patient registration",
      id: "58365937-0288-42c3-a52a-654a5d9d1387",
      method: "POST",
      address: "https://localhost:5001/Patients/quick",
      headers: {
        authority: "localhost:5001",
        "content-length": "0",
        accept: "text/plain",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        origin: "https://localhost:5001",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Successful POST request", function() {
          pm.expect(pm.response.code).to.be.oneOf([201, 202]);
        });

        pm.test("Patient was created", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.have.property("id");
          pm.expect(jsonData).to.have.property("mrn");
          pm.expect(jsonData).to.have.property("dateOfBirth");
          pm.expect(jsonData).to.have.property("firstName");
          pm.expect(jsonData).to.have.property("lastName");
          pm.expect(jsonData).to.have.property("department");
          pm.expect(jsonData).to.have.property("sex");
        });

        const moment = require("moment");

        const TimeZoneUTCOffsetMapping = {
          "America/Los_Angeles": -7
        };

        const LocalUTCOffset = -5;

        function getMomentDisplayInTimeZone(momentObj, timeZone, dateFormat) {
          let timeZoneUTCOffset = TimeZoneUTCOffsetMapping[timeZone];
          if (timeZoneUTCOffset === undefined) {
            throw new Error("No time zone matched");
          }

          return momentObj
            .add(timeZoneUTCOffset - LocalUTCOffset, "hour")
            .format(dateFormat);
        }

        console.log(
          getMomentDisplayInTimeZone(
            moment(),
            "America/Los_Angeles",
            "YYYY_MM_DD_T_HH_mm_ss"
          )
        );

        let dateNow = getMomentDisplayInTimeZone(
          moment(),
          "America/Los_Angeles",
          "YYYY_MM_DD_T_HH_mm_ss"
        );
        dateNow = moment()
          .subtract(5, "minutes")
          .toDate();
        let dateDiff = moment(pm.response.json().dateOfBirth).isBefore(dateNow);

        console.log(dateNow);

        pm.test("Created within the last 5 minutes: ", () => {
          pm.expect(dateDiff).to.be.true;
        });

        let timestamp = moment(pm.response.json().dateOfBirth).format(
          "YYYY-MM-DD"
        );
        let isToday = moment().format("YYYY-MM-DD");

        pm.test("Check Date of Birth is Today", function() {
          pm.expect(
            moment(timestamp).isSame(isToday),
            "Dates do not match"
          ).to.be.true;
        });

        pm.test(
          "Check the date format for MRN, First Name and Last Name",
          () => {
            var jsonData = pm.response.json();
            pm.expect(jsonData.mrn).to.match(
              /^\d{4}_\d{2}_\d{2}_T_\d{2}_\d{2}_\d{2}_\d{2}MRN$/
            );
            pm.expect(jsonData.firstName).to.match(
              /^\d{4}_\d{2}_\d{2}_T_\d{2}_\d{2}_\d{2}_\d{2}FirstName$/
            );
            pm.expect(jsonData.lastName).to.match(
              /^\d{4}_\d{2}_\d{2}_T_\d{2}_\d{2}_\d{2}_\d{2}LastName$/
            );
          }
        );
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Register new patient",
      id: "4a04ba5e-dbf7-4eaf-85a7-fca45f4b9589",
      method: "POST",
      address: "https://localhost:5001/Patients",
      data:
        '{\r\n  "id": 0,\r\n  "mrn": "string",\r\n  "firstName": "string",\r\n  "lastName": "string",\r\n  "dateOfBirth": "2020-09-03T15:01:03.876Z",\r\n  "sex": {\r\n    "translationKey": "string",\r\n    "id": "string",\r\n    "value": "string"\r\n  },\r\n  "department": {\r\n    "translationKey": "string",\r\n    "id": "string",\r\n    "value": "string"\r\n  },\r\n  "procedureType": {\r\n    "translationKey": "string",\r\n    "id": "string",\r\n    "value": "string"\r\n  },\r\n  "physician": {\r\n    "id": "string",\r\n    "firstName": "string",\r\n    "lastName": "string"\r\n  },\r\n  "scopeSerialNumber": "string"\r\n}',
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "content-type": "application/json",
        origin: "https://localhost:5001",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Successful POST request", function() {
          pm.expect(pm.response.code).to.be.oneOf([201, 202]);
        });

        pm.test("Patient was created", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.have.property("id");
          pm.expect(jsonData).to.have.property("mrn");
          pm.expect(jsonData).to.have.property("dateOfBirth");
          pm.expect(jsonData).to.have.property("firstName");
          pm.expect(jsonData).to.have.property("lastName");
          pm.expect(jsonData).to.have.property("department");
          pm.expect(jsonData).to.have.property("sex");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Get Procedure Types",
      id: "6ebd878f-bf0c-4b4e-b7f1-92cf1146d559",
      method: "GET",
      address: "https://localhost:5001/Metadata/proceduretypes",
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Get Sexes",
      id: "041c0ed1-119d-4b1d-b5cb-2ed68baa73d7",
      method: "GET",
      address: "https://localhost:5001/Metadata/Sexes",
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Get Setup Settings",
      id: "e2c52931-f6b6-4b34-85d5-8beabcb60a57",
      method: "GET",
      address: "https://localhost:5001/Settings/setup",
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Add Department",
      id: "be77face-030a-4033-aca2-8f631e6808af",
      method: "POST",
      address: "https://localhost:5001/Metadata/departments",
      data: '{"name":"sampledepartmentname","isNew":true}',
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "content-type": "application/json",
        origin: "https://localhost:5001",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        "sec-fetch-dest": "empty",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en-US,en;q=0.9"
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Get All Departments",
      id: "f8b43d68-2d03-457c-bd42-d72c2e5bc0d9",
      method: "GET",
      address: "https://localhost:5001/Metadata/departments",
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        "sec-fetch-dest": "empty",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en-US,en;q=0.9"
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Delete Department",
      id: "fd4b7d28-253e-47ce-a7fb-d135f67f20a7",
      method: "DELETE",
      address:
        "https://localhost:5001/Metadata/departments/sampledepartmentname",
      headers: {
        authority: "localhost:5001",
        accept: "*/*",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        origin: "https://localhost:5001",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        "sec-fetch-dest": "empty",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en-US,en;q=0.9"
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Add Procedure Type",
      id: "0581179d-610a-4f1a-a8ad-c19a176a29dc",
      method: "POST",
      address: "https://localhost:5001/Metadata/procedureTypes",
      data: '{"name":"procTypeSample","department":"departmentSample"}',
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "content-type": "application/json",
        origin: "https://localhost:5001",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        "sec-fetch-dest": "empty",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en-US,en;q=0.9"
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Get Procedure Types by Department",
      id: "62cd0293-e384-4c43-bd2f-914090b53402",
      method: "GET",
      address:
        "https://localhost:5001/Metadata/departments/departmentSample/procedureTypes",
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        "sec-fetch-dest": "empty",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en-US,en;q=0.9"
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Delete Procedure Type",
      id: "ba559ecc-beab-47b6-909a-f84746ca27b9",
      method: "DELETE",
      address:
        "https://localhost:5001/Metadata/departments/departmentSample/procedureTypes/procTypeSample",
      headers: {
        authority: "localhost:5001",
        accept: "*/*",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        origin: "https://localhost:5001",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        "sec-fetch-dest": "empty",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en-US,en;q=0.9"
      }
    });
  });

  group("Health", function() {
    postman[Request]({
      name: "Health Check",
      id: "40ec15b9-e9e3-456c-993a-b40af1a48263",
      method: "GET",
      address: "https://localhost:5001/Health/check/",
      headers: {
        authority: "localhost:6001",
        accept: "*/*",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.34 Safari/537.36 Edg/81.0.416.20",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        "sec-fetch-dest": "empty",
        referer: "https://localhost:6001/index.html",
        "accept-language": "en-US,en;q=0.9,es;q=0.8,th;q=0.7"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
      }
    });

    postman[Request]({
      name: "Health Check Secure",
      id: "6e861007-80cc-4bdc-b572-a897cd776aaf",
      method: "GET",
      address: "https://localhost:5001/Health/check/secure",
      headers: {
        authority: "localhost:5001",
        accept: "*/*",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      pre() {
        var request = {
          url: pm.environment.get("LOGIN_URL"),
          method: "POST",
          header: "Content-Type:application/json",
          body: {
            mode: "application/json",
            raw: JSON.stringify({
              email: pm.environment.get("ADMIN_USR"),
              password: pm.environment.get("ADMIN_PASS")
            })
          }
        };

        pm.sendRequest(request, function(err, res) {
          console.log(err ? err : res.json());

          if (err === null) {
            console.log("Saving the token");
            var responseJson = res.json();

            console.log("Token: " + responseJson.accessToken);

            pm.environment.set(
              "CURRENT_ACCESS_TOKEN",
              responseJson.accessToken
            );
          }
        });
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });
  });

  group("Licensing", function() {
    postman[Request]({
      name: "Validate Licensing",
      id: "2d4a18d7-87da-4770-8cf4-ad6680abca5a",
      method: "POST",
      address: "https://localhost:5001/Licenses/11111",
      headers: {
        authority: "localhost:5001",
        "content-length": "0",
        accept: "*/*",
        "sec-fetch-dest": "empty",
        authorization: "Bearer ddd",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        origin: "https://localhost:5001",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Get All Software Installed",
      id: "0d56f87a-c88f-46c6-9628-87fa982505c6",
      method: "GET",
      address: "https://localhost:5001/Licenses",
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });
  });

  group("PGS", function() {
    postman[Request]({
      name: "Get Content Types",
      id: "acda313e-6f74-4e0a-a768-7a218d6709f6",
      method: "GET",
      address: "https://localhost:5001/Metadata/contenttypes",
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Get Content by Type",
      id: "20ca255e-bac8-45b1-a334-f8c57656c44c",
      method: "GET",
      address: "https://localhost:5001/Metadata/Content/P",
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Get PGS outputs",
      id: "de5b88ed-a3cb-4b82-9a57-a5288b0c72ee",
      method: "GET",
      address: "https://localhost:5001/Devices/outputs/pgs",
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Send Play Video Command",
      id: "ec9f2124-a36c-4cd1-907f-13dbda7061f8",
      method: "PUT",
      address: "https://localhost:5001/Devices/commands",
      data:
        '{\r\n   "commandType":10,\r\n   "additionalInfo":"{{$guid}}",\r\n   "message":"{\\"type\\":\\"offer\\",\\"sdp\\":\\"v=0\\\\r\\\\no=- 5483512702478408207 2 IN IP4 127.0.0.1\\\\r\\\\ns=-\\\\r\\\\nt=0 0\\\\r\\\\na=group:BUNDLE 0 1\\\\r\\\\na=msid-semantic: WMS\\\\r\\\\nm=audio 9 UDP/TLS/RTP/SAVPF 111 103 104 9 0 8 106 105 13 110 112 113 126\\\\r\\\\nc=IN IP4 0.0.0.0\\\\r\\\\na=rtcp:9 IN IP4 0.0.0.0\\\\r\\\\na=ice-ufrag:K/dw\\\\r\\\\na=ice-pwd:ps9DeVZTxthrlS8j5xvUMfQ4\\\\r\\\\na=ice-options:trickle\\\\r\\\\na=fingerprint:sha-256 AE:A8:F2:1B:49:9E:32:75:5B:72:21:DB:E4:48:71:CA:C2:E8:AB:28:5E:D1:EA:36:88:B7:14:E3:97:94:92:02\\\\r\\\\na=setup:actpass\\\\r\\\\na=mid:0\\\\r\\\\na=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level\\\\r\\\\na=extmap:2 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\\\\r\\\\na=extmap:3 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\\\\r\\\\na=extmap:4 urn:ietf:params:rtp-hdrext:sdes:mid\\\\r\\\\na=extmap:5 urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id\\\\r\\\\na=extmap:6 urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id\\\\r\\\\na=recvonly\\\\r\\\\na=rtcp-mux\\\\r\\\\na=rtpmap:111 opus/48000/2\\\\r\\\\na=rtcp-fb:111 transport-cc\\\\r\\\\na=fmtp:111 minptime=10;useinbandfec=1\\\\r\\\\na=rtpmap:103 ISAC/16000\\\\r\\\\na=rtpmap:104 ISAC/32000\\\\r\\\\na=rtpmap:9 G722/8000\\\\r\\\\na=rtpmap:0 PCMU/8000\\\\r\\\\na=rtpmap:8 PCMA/8000\\\\r\\\\na=rtpmap:106 CN/32000\\\\r\\\\na=rtpmap:105 CN/16000\\\\r\\\\na=rtpmap:13 CN/8000\\\\r\\\\na=rtpmap:110 telephone-event/48000\\\\r\\\\na=rtpmap:112 telephone-event/32000\\\\r\\\\na=rtpmap:113 telephone-event/16000\\\\r\\\\na=rtpmap:126 telephone-event/8000\\\\r\\\\nm=video 9 UDP/TLS/RTP/SAVPF 96 97 98 99 100 101 102 122 127 121 125 107 108 109 124 120 123 119 114 115 116\\\\r\\\\nc=IN IP4 0.0.0.0\\\\r\\\\na=rtcp:9 IN IP4 0.0.0.0\\\\r\\\\na=ice-ufrag:K/dw\\\\r\\\\na=ice-pwd:ps9DeVZTxthrlS8j5xvUMfQ4\\\\r\\\\na=ice-options:trickle\\\\r\\\\na=fingerprint:sha-256 AE:A8:F2:1B:49:9E:32:75:5B:72:21:DB:E4:48:71:CA:C2:E8:AB:28:5E:D1:EA:36:88:B7:14:E3:97:94:92:02\\\\r\\\\na=setup:actpass\\\\r\\\\na=mid:1\\\\r\\\\na=extmap:14 urn:ietf:params:rtp-hdrext:toffset\\\\r\\\\na=extmap:2 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\\\\r\\\\na=extmap:13 urn:3gpp:video-orientation\\\\r\\\\na=extmap:3 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\\\\r\\\\na=extmap:12 http://www.webrtc.org/experiments/rtp-hdrext/playout-delay\\\\r\\\\na=extmap:11 http://www.webrtc.org/experiments/rtp-hdrext/video-content-type\\\\r\\\\na=extmap:7 http://www.webrtc.org/experiments/rtp-hdrext/video-timing\\\\r\\\\na=extmap:8 http://tools.ietf.org/html/draft-ietf-avtext-framemarking-07\\\\r\\\\na=extmap:9 http://www.webrtc.org/experiments/rtp-hdrext/color-space\\\\r\\\\na=extmap:4 urn:ietf:params:rtp-hdrext:sdes:mid\\\\r\\\\na=extmap:5 urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id\\\\r\\\\na=extmap:6 urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id\\\\r\\\\na=recvonly\\\\r\\\\na=rtcp-mux\\\\r\\\\na=rtcp-rsize\\\\r\\\\na=rtpmap:96 VP8/90000\\\\r\\\\na=rtcp-fb:96 goog-remb\\\\r\\\\na=rtcp-fb:96 transport-cc\\\\r\\\\na=rtcp-fb:96 ccm fir\\\\r\\\\na=rtcp-fb:96 nack\\\\r\\\\na=rtcp-fb:96 nack pli\\\\r\\\\na=rtpmap:97 rtx/90000\\\\r\\\\na=fmtp:97 apt=96\\\\r\\\\na=rtpmap:98 VP9/90000\\\\r\\\\na=rtcp-fb:98 goog-remb\\\\r\\\\na=rtcp-fb:98 transport-cc\\\\r\\\\na=rtcp-fb:98 ccm fir\\\\r\\\\na=rtcp-fb:98 nack\\\\r\\\\na=rtcp-fb:98 nack pli\\\\r\\\\na=fmtp:98 profile-id=0\\\\r\\\\na=rtpmap:99 rtx/90000\\\\r\\\\na=fmtp:99 apt=98\\\\r\\\\na=rtpmap:100 VP9/90000\\\\r\\\\na=rtcp-fb:100 goog-remb\\\\r\\\\na=rtcp-fb:100 transport-cc\\\\r\\\\na=rtcp-fb:100 ccm fir\\\\r\\\\na=rtcp-fb:100 nack\\\\r\\\\na=rtcp-fb:100 nack pli\\\\r\\\\na=fmtp:100 profile-id=2\\\\r\\\\na=rtpmap:101 rtx/90000\\\\r\\\\na=fmtp:101 apt=100\\\\r\\\\na=rtpmap:102 H264/90000\\\\r\\\\na=rtcp-fb:102 goog-remb\\\\r\\\\na=rtcp-fb:102 transport-cc\\\\r\\\\na=rtcp-fb:102 ccm fir\\\\r\\\\na=rtcp-fb:102 nack\\\\r\\\\na=rtcp-fb:102 nack pli\\\\r\\\\na=fmtp:102 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42001f\\\\r\\\\na=rtpmap:122 rtx/90000\\\\r\\\\na=fmtp:122 apt=102\\\\r\\\\na=rtpmap:127 H264/90000\\\\r\\\\na=rtcp-fb:127 goog-remb\\\\r\\\\na=rtcp-fb:127 transport-cc\\\\r\\\\na=rtcp-fb:127 ccm fir\\\\r\\\\na=rtcp-fb:127 nack\\\\r\\\\na=rtcp-fb:127 nack pli\\\\r\\\\na=fmtp:127 level-asymmetry-allowed=1;packetization-mode=0;profile-level-id=42001f\\\\r\\\\na=rtpmap:121 rtx/90000\\\\r\\\\na=fmtp:121 apt=127\\\\r\\\\na=rtpmap:125 H264/90000\\\\r\\\\na=rtcp-fb:125 goog-remb\\\\r\\\\na=rtcp-fb:125 transport-cc\\\\r\\\\na=rtcp-fb:125 ccm fir\\\\r\\\\na=rtcp-fb:125 nack\\\\r\\\\na=rtcp-fb:125 nack pli\\\\r\\\\na=fmtp:125 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f\\\\r\\\\na=rtpmap:107 rtx/90000\\\\r\\\\na=fmtp:107 apt=125\\\\r\\\\na=rtpmap:108 H264/90000\\\\r\\\\na=rtcp-fb:108 goog-remb\\\\r\\\\na=rtcp-fb:108 transport-cc\\\\r\\\\na=rtcp-fb:108 ccm fir\\\\r\\\\na=rtcp-fb:108 nack\\\\r\\\\na=rtcp-fb:108 nack pli\\\\r\\\\na=fmtp:108 level-asymmetry-allowed=1;packetization-mode=0;profile-level-id=42e01f\\\\r\\\\na=rtpmap:109 rtx/90000\\\\r\\\\na=fmtp:109 apt=108\\\\r\\\\na=rtpmap:124 H264/90000\\\\r\\\\na=rtcp-fb:124 goog-remb\\\\r\\\\na=rtcp-fb:124 transport-cc\\\\r\\\\na=rtcp-fb:124 ccm fir\\\\r\\\\na=rtcp-fb:124 nack\\\\r\\\\na=rtcp-fb:124 nack pli\\\\r\\\\na=fmtp:124 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=4d0032\\\\r\\\\na=rtpmap:120 rtx/90000\\\\r\\\\na=fmtp:120 apt=124\\\\r\\\\na=rtpmap:123 H264/90000\\\\r\\\\na=rtcp-fb:123 goog-remb\\\\r\\\\na=rtcp-fb:123 transport-cc\\\\r\\\\na=rtcp-fb:123 ccm fir\\\\r\\\\na=rtcp-fb:123 nack\\\\r\\\\na=rtcp-fb:123 nack pli\\\\r\\\\na=fmtp:123 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=640032\\\\r\\\\na=rtpmap:119 rtx/90000\\\\r\\\\na=fmtp:119 apt=123\\\\r\\\\na=rtpmap:114 red/90000\\\\r\\\\na=rtpmap:115 rtx/90000\\\\r\\\\na=fmtp:115 apt=114\\\\r\\\\na=rtpmap:116 ulpfec/90000\\\\r\\\\n\\"}",\r\n   "type":"webrtc.offer",\r\n   "devices":[\r\n      {\r\n         "id":"MX4PreviewA",\r\n         "name":"",\r\n         "preview":"",\r\n         "isActive":true\r\n      }\r\n   ]\r\n}',
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json",
        "X-Requested-With": "{{$guid}}"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Send Stop Video Command",
      id: "d0b33a7a-a76c-409d-8424-1e60ba3add6a",
      method: "PUT",
      address: "https://localhost:5001/Devices/commands",
      data:
        '{\r\n   "commandType":11,\r\n   "additionalInfo":"f0c81f47-4633-4418-9e27-472fb1ce3ec5",\r\n   "message":"",\r\n   "type":"",\r\n   "devices":[\r\n      {\r\n         "id":"Preview",\r\n         "name":"",\r\n         "preview":"",\r\n         "isActive":true\r\n      }\r\n   ]\r\n}',
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Send Handle Message for Video Command",
      id: "4ffd005f-a112-4e02-8f69-984d550f07cb",
      method: "PUT",
      address: "https://localhost:5001/Devices/commands",
      data:
        '{\r\n   "commandType":15,\r\n   "additionalInfo":"e6baf99a-a6f4-48e2-8979-997b6fdb45d0",\r\n   "message":"{\\"candidate\\":\\"candidate:918459911 1 udp 2113937151 192.168.1.18 57195 typ host generation 0 ufrag DRkJ network-cost 999\\",\\"sdpMid\\":\\"0\\",\\"sdpMLineIndex\\":0}",\r\n   "type":"webrtc.icecandidate",\r\n   "devices":[\r\n      {\r\n         "id":"Preview",\r\n         "name":"",\r\n         "preview":"",\r\n         "isActive":true\r\n      }\r\n   ]\r\n}',
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });
  });

  group("Security", function() {
    postman[Request]({
      name: "Login",
      id: "cdefe90a-228e-4af4-b44d-b1941004849a",
      method: "POST",
      address: "https://localhost:6001/api/login",
      data: '{"email":"admin@admin.com","password":"12345678"}',
      headers: {
        authority: "localhost:6001",
        accept: "*/*",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "content-type": "application/json",
        origin: "https://localhost:6001",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:6001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      }
    });

    postman[Request]({
      name: "Refresh Token",
      id: "e1238123-009a-47e5-90aa-12e5c75b2c5c",
      method: "POST",
      address: "https://localhost:6001/api/token/refresh",
      data:
        '{"token":"ADMuePakwlLNCczUppYbZJYRiRio/0p9X3aBhvkGD1U4iApYm14tvFGDznvPzRWOIg==","userEmail":"admin@admin.com"}',
      headers: {
        authority: "localhost:6001",
        accept: "*/*",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "content-type": "application/json",
        origin: "https://localhost:6001",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:6001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      }
    });

    postman[Request]({
      name: "Revoke Token",
      id: "84a02341-b6c0-49c4-9729-ccf28f8da196",
      method: "POST",
      address: "https://localhost:6001/api/token/revoke",
      data:
        '{"token":"APwdxIRujdFD5JQBLTgblJ8shzQx/pribQ0lxOXHq0QRzvixInG7pX4QupluXbW7Xw=="}',
      headers: {
        authority: "localhost:6001",
        accept: "*/*",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "content-type": "application/json",
        origin: "https://localhost:6001",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:6001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      }
    });
  });

  group("Broadcaster", function() {
    postman[Request]({
      name: "Send Broadcast to RabbitMQ",
      id: "e9b5b400-64b6-4914-8347-f28752c87dd2",
      method: "POST",
      address: "https://localhost:5001/Notifications/queued",
      data: '{"content":"string","eventGroup":0}',
      headers: {
        authority: "localhost:5001",
        accept: "*/*",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "content-type": "application/json",
        origin: "https://localhost:5001",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Successful POST request", function() {
          pm.expect(pm.response.code).to.be.oneOf([201, 202]);
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Send Broadcast Direct to Signal R",
      id: "f9442fa6-fc5c-4a2f-ac04-6f2b42380054",
      method: "POST",
      address: "https://localhost:5001/Notifications/direct",
      data: '{"content":"string","eventGroup":0}',
      headers: {
        authority: "localhost:5001",
        accept: "*/*",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "content-type": "application/json",
        origin: "https://localhost:5001",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Successful POST request", function() {
          pm.expect(pm.response.code).to.be.oneOf([201, 202]);
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });
  });

  group("Timeout", function() {
    postman[Request]({
      name: "Send Play Slides Command",
      id: "0f6fe7b0-5039-4347-b250-ab3982428475",
      method: "PUT",
      address: "https://localhost:5001/Devices/commands",
      data:
        '{\r\n   "commandType":20,\r\n   "additionalInfo":"f0c81f47-4633-4418-9e27-472fb1ce3ec5",\r\n   "message":"",\r\n   "type":"",\r\n   "devices":[\r\n      {\r\n         "id":"Timeout",\r\n         "name":"",\r\n         "preview":"",\r\n         "isActive":true\r\n      }\r\n   ]\r\n}',
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Send Stop Slides Command",
      id: "04e5c611-2d4b-4ee4-8e7c-4c0a966b28d4",
      method: "PUT",
      address: "https://localhost:5001/Devices/commands",
      data:
        '{\r\n   "commandType":21,\r\n   "additionalInfo":"{{$guid}}",\r\n   "message":"{\\"type\\":\\"offer\\",\\"sdp\\":\\"v=0\\\\r\\\\no=- 5483512702478408207 2 IN IP4 127.0.0.1\\\\r\\\\ns=-\\\\r\\\\nt=0 0\\\\r\\\\na=group:BUNDLE 0 1\\\\r\\\\na=msid-semantic: WMS\\\\r\\\\nm=audio 9 UDP/TLS/RTP/SAVPF 111 103 104 9 0 8 106 105 13 110 112 113 126\\\\r\\\\nc=IN IP4 0.0.0.0\\\\r\\\\na=rtcp:9 IN IP4 0.0.0.0\\\\r\\\\na=ice-ufrag:K/dw\\\\r\\\\na=ice-pwd:ps9DeVZTxthrlS8j5xvUMfQ4\\\\r\\\\na=ice-options:trickle\\\\r\\\\na=fingerprint:sha-256 AE:A8:F2:1B:49:9E:32:75:5B:72:21:DB:E4:48:71:CA:C2:E8:AB:28:5E:D1:EA:36:88:B7:14:E3:97:94:92:02\\\\r\\\\na=setup:actpass\\\\r\\\\na=mid:0\\\\r\\\\na=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level\\\\r\\\\na=extmap:2 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\\\\r\\\\na=extmap:3 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\\\\r\\\\na=extmap:4 urn:ietf:params:rtp-hdrext:sdes:mid\\\\r\\\\na=extmap:5 urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id\\\\r\\\\na=extmap:6 urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id\\\\r\\\\na=recvonly\\\\r\\\\na=rtcp-mux\\\\r\\\\na=rtpmap:111 opus/48000/2\\\\r\\\\na=rtcp-fb:111 transport-cc\\\\r\\\\na=fmtp:111 minptime=10;useinbandfec=1\\\\r\\\\na=rtpmap:103 ISAC/16000\\\\r\\\\na=rtpmap:104 ISAC/32000\\\\r\\\\na=rtpmap:9 G722/8000\\\\r\\\\na=rtpmap:0 PCMU/8000\\\\r\\\\na=rtpmap:8 PCMA/8000\\\\r\\\\na=rtpmap:106 CN/32000\\\\r\\\\na=rtpmap:105 CN/16000\\\\r\\\\na=rtpmap:13 CN/8000\\\\r\\\\na=rtpmap:110 telephone-event/48000\\\\r\\\\na=rtpmap:112 telephone-event/32000\\\\r\\\\na=rtpmap:113 telephone-event/16000\\\\r\\\\na=rtpmap:126 telephone-event/8000\\\\r\\\\nm=video 9 UDP/TLS/RTP/SAVPF 96 97 98 99 100 101 102 122 127 121 125 107 108 109 124 120 123 119 114 115 116\\\\r\\\\nc=IN IP4 0.0.0.0\\\\r\\\\na=rtcp:9 IN IP4 0.0.0.0\\\\r\\\\na=ice-ufrag:K/dw\\\\r\\\\na=ice-pwd:ps9DeVZTxthrlS8j5xvUMfQ4\\\\r\\\\na=ice-options:trickle\\\\r\\\\na=fingerprint:sha-256 AE:A8:F2:1B:49:9E:32:75:5B:72:21:DB:E4:48:71:CA:C2:E8:AB:28:5E:D1:EA:36:88:B7:14:E3:97:94:92:02\\\\r\\\\na=setup:actpass\\\\r\\\\na=mid:1\\\\r\\\\na=extmap:14 urn:ietf:params:rtp-hdrext:toffset\\\\r\\\\na=extmap:2 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\\\\r\\\\na=extmap:13 urn:3gpp:video-orientation\\\\r\\\\na=extmap:3 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\\\\r\\\\na=extmap:12 http://www.webrtc.org/experiments/rtp-hdrext/playout-delay\\\\r\\\\na=extmap:11 http://www.webrtc.org/experiments/rtp-hdrext/video-content-type\\\\r\\\\na=extmap:7 http://www.webrtc.org/experiments/rtp-hdrext/video-timing\\\\r\\\\na=extmap:8 http://tools.ietf.org/html/draft-ietf-avtext-framemarking-07\\\\r\\\\na=extmap:9 http://www.webrtc.org/experiments/rtp-hdrext/color-space\\\\r\\\\na=extmap:4 urn:ietf:params:rtp-hdrext:sdes:mid\\\\r\\\\na=extmap:5 urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id\\\\r\\\\na=extmap:6 urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id\\\\r\\\\na=recvonly\\\\r\\\\na=rtcp-mux\\\\r\\\\na=rtcp-rsize\\\\r\\\\na=rtpmap:96 VP8/90000\\\\r\\\\na=rtcp-fb:96 goog-remb\\\\r\\\\na=rtcp-fb:96 transport-cc\\\\r\\\\na=rtcp-fb:96 ccm fir\\\\r\\\\na=rtcp-fb:96 nack\\\\r\\\\na=rtcp-fb:96 nack pli\\\\r\\\\na=rtpmap:97 rtx/90000\\\\r\\\\na=fmtp:97 apt=96\\\\r\\\\na=rtpmap:98 VP9/90000\\\\r\\\\na=rtcp-fb:98 goog-remb\\\\r\\\\na=rtcp-fb:98 transport-cc\\\\r\\\\na=rtcp-fb:98 ccm fir\\\\r\\\\na=rtcp-fb:98 nack\\\\r\\\\na=rtcp-fb:98 nack pli\\\\r\\\\na=fmtp:98 profile-id=0\\\\r\\\\na=rtpmap:99 rtx/90000\\\\r\\\\na=fmtp:99 apt=98\\\\r\\\\na=rtpmap:100 VP9/90000\\\\r\\\\na=rtcp-fb:100 goog-remb\\\\r\\\\na=rtcp-fb:100 transport-cc\\\\r\\\\na=rtcp-fb:100 ccm fir\\\\r\\\\na=rtcp-fb:100 nack\\\\r\\\\na=rtcp-fb:100 nack pli\\\\r\\\\na=fmtp:100 profile-id=2\\\\r\\\\na=rtpmap:101 rtx/90000\\\\r\\\\na=fmtp:101 apt=100\\\\r\\\\na=rtpmap:102 H264/90000\\\\r\\\\na=rtcp-fb:102 goog-remb\\\\r\\\\na=rtcp-fb:102 transport-cc\\\\r\\\\na=rtcp-fb:102 ccm fir\\\\r\\\\na=rtcp-fb:102 nack\\\\r\\\\na=rtcp-fb:102 nack pli\\\\r\\\\na=fmtp:102 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42001f\\\\r\\\\na=rtpmap:122 rtx/90000\\\\r\\\\na=fmtp:122 apt=102\\\\r\\\\na=rtpmap:127 H264/90000\\\\r\\\\na=rtcp-fb:127 goog-remb\\\\r\\\\na=rtcp-fb:127 transport-cc\\\\r\\\\na=rtcp-fb:127 ccm fir\\\\r\\\\na=rtcp-fb:127 nack\\\\r\\\\na=rtcp-fb:127 nack pli\\\\r\\\\na=fmtp:127 level-asymmetry-allowed=1;packetization-mode=0;profile-level-id=42001f\\\\r\\\\na=rtpmap:121 rtx/90000\\\\r\\\\na=fmtp:121 apt=127\\\\r\\\\na=rtpmap:125 H264/90000\\\\r\\\\na=rtcp-fb:125 goog-remb\\\\r\\\\na=rtcp-fb:125 transport-cc\\\\r\\\\na=rtcp-fb:125 ccm fir\\\\r\\\\na=rtcp-fb:125 nack\\\\r\\\\na=rtcp-fb:125 nack pli\\\\r\\\\na=fmtp:125 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f\\\\r\\\\na=rtpmap:107 rtx/90000\\\\r\\\\na=fmtp:107 apt=125\\\\r\\\\na=rtpmap:108 H264/90000\\\\r\\\\na=rtcp-fb:108 goog-remb\\\\r\\\\na=rtcp-fb:108 transport-cc\\\\r\\\\na=rtcp-fb:108 ccm fir\\\\r\\\\na=rtcp-fb:108 nack\\\\r\\\\na=rtcp-fb:108 nack pli\\\\r\\\\na=fmtp:108 level-asymmetry-allowed=1;packetization-mode=0;profile-level-id=42e01f\\\\r\\\\na=rtpmap:109 rtx/90000\\\\r\\\\na=fmtp:109 apt=108\\\\r\\\\na=rtpmap:124 H264/90000\\\\r\\\\na=rtcp-fb:124 goog-remb\\\\r\\\\na=rtcp-fb:124 transport-cc\\\\r\\\\na=rtcp-fb:124 ccm fir\\\\r\\\\na=rtcp-fb:124 nack\\\\r\\\\na=rtcp-fb:124 nack pli\\\\r\\\\na=fmtp:124 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=4d0032\\\\r\\\\na=rtpmap:120 rtx/90000\\\\r\\\\na=fmtp:120 apt=124\\\\r\\\\na=rtpmap:123 H264/90000\\\\r\\\\na=rtcp-fb:123 goog-remb\\\\r\\\\na=rtcp-fb:123 transport-cc\\\\r\\\\na=rtcp-fb:123 ccm fir\\\\r\\\\na=rtcp-fb:123 nack\\\\r\\\\na=rtcp-fb:123 nack pli\\\\r\\\\na=fmtp:123 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=640032\\\\r\\\\na=rtpmap:119 rtx/90000\\\\r\\\\na=fmtp:119 apt=123\\\\r\\\\na=rtpmap:114 red/90000\\\\r\\\\na=rtpmap:115 rtx/90000\\\\r\\\\na=fmtp:115 apt=114\\\\r\\\\na=rtpmap:116 ulpfec/90000\\\\r\\\\n\\"}",\r\n   "type":"webrtc.offer",\r\n   "devices":[\r\n      {\r\n         "id":"SimStream",\r\n         "name":"",\r\n         "preview":"",\r\n         "isActive":true\r\n      }\r\n   ]\r\n}',
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json",
        "X-Requested-With": "{{$guid}}"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Send Next Slide Command",
      id: "b30a0005-4198-4a8f-8a0f-50604164888c",
      method: "PUT",
      address: "https://localhost:5001/Devices/commands",
      data:
        '{\r\n   "commandType":22,\r\n   "additionalInfo":"f0c81f47-4633-4418-9e27-472fb1ce3ec5",\r\n   "message":"",\r\n   "type":"",\r\n   "devices":[\r\n      {\r\n         "id":"Timeout",\r\n         "name":"",\r\n         "preview":"",\r\n         "isActive":true\r\n      }\r\n   ]\r\n}',
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Send Previous Slide Command",
      id: "915a0c40-02b3-4ab8-ae32-f256b6ab4714",
      method: "PUT",
      address: "https://localhost:5001/Devices/commands",
      data:
        '{\r\n   "commandType":23,\r\n   "additionalInfo":"f0c81f47-4633-4418-9e27-472fb1ce3ec5",\r\n   "message":"",\r\n   "type":"",\r\n   "devices":[\r\n      {\r\n         "id":"Timeout",\r\n         "name":"",\r\n         "preview":"",\r\n         "isActive":true\r\n      }\r\n   ]\r\n}',
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Set Current Page Command",
      id: "936f7b08-b908-45ac-b9b1-39838c4ac650",
      method: "PUT",
      address: "https://localhost:5001/Devices/commands",
      data:
        '{\r\n   "commandType":24,\r\n   "additionalInfo":"f0c81f47-4633-4418-9e27-472fb1ce3ec5",\r\n   "message":"1",\r\n   "type":"",\r\n   "devices":[\r\n      {\r\n         "id":"Timeout",\r\n         "name":"",\r\n         "preview":"",\r\n         "isActive":true\r\n      }\r\n   ]\r\n}',
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Get Timeout Settings",
      id: "6c80b63a-55d6-46f7-b188-29674f7833af",
      method: "GET",
      address: "https://localhost:5001/Settings/timeout",
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Get Timeouts outputs",
      id: "401fafb7-eabf-475e-aa3d-0f496d7d7565",
      method: "GET",
      address: "https://localhost:5001/Devices/outputs/timeout",
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });
  });

  group("Video Routing", function() {
    postman[Request]({
      name: "Get Operations sources",
      id: "479f6a25-dbcc-4f63-9b88-c0aca662f8ad",
      method: "GET",
      address: "https://localhost:5001/Devices/sources/operations",
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Enter Full Screen",
      id: "4de9b0a7-693a-438c-a800-b13439b16e06",
      method: "PUT",
      address: "https://localhost:5001/Devices/commands",
      data:
        '{\r\n   "commandType":30,\r\n   "additionalInfo":"0",\r\n   "message":"",\r\n   "type":"",\r\n   "devices":[\r\n      {\r\n         "id":"tpo1",\r\n         "internalIndex": 0\r\n      }\r\n   ]\r\n}',
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Get Operations outputs",
      id: "02f74db9-1c7b-468c-bfef-8b70f6ee51ea",
      method: "GET",
      address: "https://localhost:5001/Devices/outputs/operations",
      headers: {
        authority: "localhost:5001",
        accept: "text/plain",
        "sec-fetch-dest": "empty",
        "user-agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        referer: "https://localhost:5001/swagger/index.html",
        "accept-language": "en,en-US;q=0.9"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Exit Full Screen",
      id: "c335ee52-70a5-4400-960b-f575fcd69e75",
      method: "PUT",
      address: "https://localhost:5001/Devices/commands",
      data:
        '{\r\n   "commandType":31,\r\n   "additionalInfo":"0",\r\n   "message":"",\r\n   "type":"",\r\n   "devices":[\r\n      {\r\n         "id":"tpo1",\r\n         "internalIndex": 0\r\n      }\r\n   ]\r\n}',
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Route Video Source",
      id: "d08f903e-bd94-4172-8d64-d5dce311b152",
      method: "PUT",
      address: "https://localhost:5001/Devices/commands",
      data:
        '{\r\n   "commandType":32,\r\n   "additionalInfo":"",\r\n   "message":"",\r\n   "type":"",\r\n   "devices":[\r\n      {\r\n         "id":"tpo1",\r\n         "internalIndex": 0\r\n      }\r\n   ],\r\n   "destinations":[\r\n      {\r\n        "id": "tpo1",\r\n        "internalIndex": 0\r\n      }\r\n   ]\r\n}',
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Unroute Video Source",
      id: "0d7c55e3-c4c1-458a-93c7-d66765c9b8dc",
      method: "PUT",
      address: "https://localhost:5001/Devices/commands",
      data:
        '{\r\n   "commandType":33,\r\n   "additionalInfo":"",\r\n   "message":"",\r\n   "type":"",\r\n   "devices":[\r\n      {\r\n         "id":"tpo1",\r\n         "internalIndex": 0\r\n      }\r\n   ]\r\n}',
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Get Video Routing Settings",
      id: "b6c4c3fc-5d86-49ec-9732-9f6d245a1936",
      method: "GET",
      address: "https://localhost:5001/Settings/VideoRouting",
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Start Recording",
      id: "891ad670-d8ad-4f02-b4d7-f29a946f1fad",
      method: "PUT",
      address: "https://localhost:5001/Devices/commands",
      data:
        '{\r\n   "commandType":40,\r\n   "additionalInfo":"",\r\n   "message":"",\r\n   "type":"",\r\n   "devices":[\r\n      {\r\n         "id":"System"\r\n      }\r\n   ],\r\n   "destinations":[]\r\n}',
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Get Stream Sources",
      id: "b0ee8170-20cf-4ada-8056-88615ed8188f",
      method: "GET",
      address: "https://localhost:5001/Media/stream/sources",
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Stop Recording",
      id: "43b5892a-7e14-4822-90dc-c8898ea28b1f",
      method: "PUT",
      address: "https://localhost:5001/Devices/commands",
      data:
        '{\r\n   "commandType":41,\r\n   "additionalInfo":"",\r\n   "message":"",\r\n   "type":"",\r\n   "devices":[\r\n      {\r\n         "id":"System"\r\n      }\r\n   ],\r\n   "destinations":[]\r\n}',
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Show Video Routing Preview",
      id: "af0f8acd-db4e-4265-ad6e-ad759049f9ed",
      method: "PUT",
      address: "https://localhost:5001/Devices/commands",
      data:
        '{\r\n   "commandType":34,\r\n   "message":"",\r\n   "type":"",\r\n   "devices":[\r\n      {\r\n         "output":null,\r\n         "isDynamic":false,\r\n         "id":"tpo0",\r\n         "name":"UI 1",\r\n         "isActive":true,\r\n         "positionInScreen":1,\r\n         "internalIndex":0,\r\n         "type":"pc",\r\n         "icon":"icon_pc"\r\n      }\r\n   ],\r\n   "destinations":[\r\n      {\r\n         "thumbnail":null,\r\n         "id":"tpo0",\r\n         "name":"Rec1",\r\n         "isActive":true,\r\n         "positionInScreen":-1,\r\n         "internalIndex":0,\r\n         "type":"Encoder",\r\n         "icon":"icon_record"\r\n      }\r\n   ],\r\n   "additionalInfo":"{\\"X\\":180.75,\\"Y\\":221,\\"Width\\":300,\\"Height\\":230.40625}"\r\n}',
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });

    postman[Request]({
      name: "Hide Video Routing Preview",
      id: "3b97ce5c-4e95-4c0a-b1a8-3b62df5045b2",
      method: "PUT",
      address: "https://localhost:5001/Devices/commands",
      data:
        '{\r\n   "commandType":35,\r\n   "message":"",\r\n   "type":"",\r\n   "devices":[\r\n      {\r\n         "output":null,\r\n         "isDynamic":false,\r\n         "id":"tpo0",\r\n         "name":"UI 1",\r\n         "isActive":true,\r\n         "positionInScreen":1,\r\n         "internalIndex":0,\r\n         "type":"pc",\r\n         "icon":"icon_pc"\r\n      }\r\n   ],\r\n   "destinations":[\r\n      {\r\n         "thumbnail":null,\r\n         "id":"tpo0",\r\n         "name":"Rec1",\r\n         "isActive":true,\r\n         "positionInScreen":-1,\r\n         "internalIndex":0,\r\n         "type":"Encoder",\r\n         "icon":"icon_record"\r\n      }\r\n   ],\r\n   "additionalInfo":"{\\"X\\":180.75,\\"Y\\":221,\\"Width\\":300,\\"Height\\":230.40625}"\r\n}',
      headers: {
        accept: "text/plain",
        "Content-Type": "application/json"
      },
      post(response) {
        pm.test("Status code is 200", function() {
          pm.response.to.have.status(200);
        });

        pm.test("Is an array", function() {
          var jsonData = pm.response.json();
          pm.expect(jsonData).to.be.an("array");
        });
      },
      auth(config, Var) {
        config.headers.Authorization = `Bearer ${pm[Var](
          "CURRENT_ACCESS_TOKEN"
        )}`;
      }
    });
  });

  postman[Pre].pop();
}
