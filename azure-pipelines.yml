resources:
  repositories:
  
  - repository: avalanche-api
    type: git
    name: avalanche/avalanche-api
    ref: dev

  - repository: devops
    type: git
    name: avalanche/devops
    
name: $(Date:yyyyMMdd)$(Rev:.rr)

trigger:
  
  - none

pool:
  
  vmImage: 'ubuntu-latest'

variables:
#common variables
- template: vg-dev-avalanche-api.yml

- name: BuildConfiguration
  value: 'Release'

stages:
- stage: build
  jobs:
  - job: build_test_publish
    steps:

     - task: UseDotNet@2
       displayName: 'use dotnet 3.1.x'
       inputs:
        version: '3.1.x'
        packageType: runtime
        
     - task: UseDotNet@2
       displayName: 'use dotnet 2.2.x'
       inputs:
        version: '2.2.x'
        packageType: runtime
     
     - task: DotNetCoreCLI@2
       displayName: 'Restore Avalanche.Api'
       inputs:
        command: restore
        projects: '**/Code/Avalanche.Api/Avalanche.Api.csproj'
        vstsFeed: 'd61e3552-9162-4b94-9184-b843c159ef58'
     
     - task: DotNetCoreCLI@2
       displayName: 'Build Avalanche.Api'
       inputs:
        projects: '**/Code/Avalanche.Api/Avalanche.Api.csproj'
        arguments: '--configuration $(BuildConfiguration)'

     - task: DotNetCoreCLI@2
       displayName: 'Test Avalanche.Api.Tests'
       inputs:
        command: test
        projects: '**/Code/Avalanche.Api.Tests/Avalanche.Api.Tests.csproj'
        arguments: '--configuration $(buildConfiguration)'
     
     - task: DotNetCoreCLI@2
       displayName: 'Publish Avalanche.Api'
       inputs:
        command: publish
        publishWebProjects: false
        projects: '**/Code/Avalanche.Api/Avalanche.Api.csproj'
        arguments: '-c $(BuildConfiguration)  -o app'
        zipAfterPublish: false
        modifyOutputPath: false
 
     - task: PublishBuildArtifacts@1
       displayName: 'Publish Build Artifacts'
       inputs:
        PathtoPublish: 'app'
        ArtifactName: app 

- stage: dev

  jobs:
     - job: push
       variables:
       - name: BuildConfiguration
         value: 'Release'

       steps:  
       - checkout: avalanche-api
       - checkout: devops
       
       - task: DownloadBuildArtifacts@0
         displayName: 'Download Build Artifacts'
         inputs:
          artifactName: app
          downloadPath: '.'
       
       - powershell: |
          $temp = "$(ImageName)"
          $temp = $temp.ToLower()
          Write-Host "##vso[task.setvariable variable=ImageNameLowercase;]$temp"
         displayName: 'Set image name'

       - task: Docker@0
         displayName: 'Docker command -Build'
         inputs:
          action: 'Run a Docker command'
          customCommand: 'build -t $(ImageNameLowercase) . -f avalanche-api/Code/Avalanche.Api/DokerfileForAdoPipeline' 

       - task: Docker@2
         displayName: 'Docker command -Tag'
         inputs:
          command: 'tag'
          arguments: '$(ImageNameLowercase) $(AcrRepository).azurecr.io/$(ImageNameLowercase):$(Build.BuildNumber)'
          addPipelineData: false
       
       - bash: |
          source devops/common/commonfunctions.sh
          ip=$(get_ext_ip)
          echo 'build server external ip is ' $ip
          echo "##vso[task.setvariable variable=ip]$ip"
          echo 'variable ip ' $(ip)
         displayName: 'Get build server external ip'

       - task: AzureCLI@1
         displayName: 'Add build server external ip to acr firewall'
         inputs:
          azureSubscription: $(azuresubscription)
          scriptPath: 'devops/resources/add-acr-firewall-ip.sh'
          arguments: '$(azuresubscription) $(AcrRepository) $(ip)'

       - task: Docker@1
         displayName: 'Run a Docker command -Push'
         inputs:
          azureSubscriptionEndpoint: $(azuresubscription)
          azureContainerRegistry: '$(AcrRepository).azurecr.io'
          command: 'Push an image'
          imageName: '$(AcrRepository).azurecr.io/$(ImageNameLowercase):$(Build.BuildNumber)'

       - task: AzureCLI@1
         displayName: 'Delete build server external ip from acr firewall'
         inputs:
          azureSubscription: $(azuresubscription)
          scriptPath: 'devops/resources/delete-acr-firewall-ip.sh'
          arguments: '$(azuresubscription) $(AcrRepository) $(ip)'