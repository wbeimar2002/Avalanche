resources:
  repositories:
  
  - repository: avalanche-api
    type: git
    name: avalanche/avalanche-api
    ref: dev

  - repository: devops
    type: git
    name: avalanche/devops
    
name: $(Date:yyyyMMdd)$(Rev:.rr)

trigger:
- dev

pool:
  #vmImage: 'windows-latest'
  vmImage: 'ubuntu-latest'

variables:

- group: vg-dev-avalanche-api

- name: BuildConfiguration
  value: 'Release'

stages:
- stage: build
  jobs:
  - job: build_test_publish
    steps:

     - task: UseDotNet@2
       displayName: 'use dotnet 3.1.x'
       inputs:
        version: '3.1.x'
        packageType: runtime
        
     - task: UseDotNet@2
       displayName: 'use dotnet 2.2.x'
       inputs:
        version: '2.2.x'
        packageType: runtime
     #- task: DotNetCoreCLI@2
       #displayName: 'Restore solution '
       #inputs:
        #command: restore
        #projects: '**/Code/*.sln'
        #vstsFeed: 'd61e3552-9162-4b94-9184-b843c159ef58'
     - task: DotNetCoreCLI@2
       displayName: 'Restore Avalanche.Api'
       inputs:
        command: restore
        projects: '**/Code/Avalanche.Api/Avalanche.Api.csproj'
        vstsFeed: 'd61e3552-9162-4b94-9184-b843c159ef58'

     #- task: DotNetCoreCLI@2
       #displayName: 'Build solution'
       #inputs:
        #projects: '**/Code/*.sln'
        #arguments: '--configuration $(BuildConfiguration)'
     
     - task: DotNetCoreCLI@2
       displayName: 'Build Avalanche.Api'
       inputs:
        projects: '**/Code/Avalanche.Api/Avalanche.Api.csproj'
        arguments: '--configuration $(BuildConfiguration)'

     - task: DotNetCoreCLI@2
       displayName: 'Test Avalanche.Api.Tests'
       inputs:
        command: test
        projects: '**/Code/Avalanche.Api.Tests/Avalanche.Api.Tests.csproj'
        arguments: '--configuration $(buildConfiguration)'
     - task: DotNetCoreCLI@2
       displayName: 'Publish Avalanche.Api'
       inputs:
        command: publish
        publishWebProjects: false
        projects: '**/Code/Avalanche.Api/Avalanche.Api.csproj'
        arguments: '-c $(BuildConfiguration)  -o app'
        zipAfterPublish: false
        modifyOutputPath: false
 
     - task: PublishBuildArtifacts@1
       displayName: 'Publish Build Artifacts'
       inputs:
        PathtoPublish: 'app'
        ArtifactName: app 

- stage: dev

  jobs:
     - job: push
       steps:  
       - checkout: avalanche-api
       - checkout: devops
       - task: DownloadBuildArtifacts@0
         displayName: 'Download Build Artifacts'
         inputs:
          artifactName: app
          downloadPath: '.'
       
       - powershell: |
          $temp = "$(ImageName)"
          $temp = $temp.ToLower()
          Write-Host "##vso[task.setvariable variable=ImageNameLowercase;]$temp"
         displayName: 'Set image name'

       - task: Docker@0
         displayName: 'Docker command -Build'
         inputs:
          action: 'Run a Docker command'
          customCommand: 'build -t $(ImageNameLowercase) . -f avalanche-api/Code/Avalanche.Api/DokerfileForAdoPipeline' 

       - task: Docker@2
         displayName: 'Docker command -Tag'
         inputs:
          command: 'tag'
          arguments: '$(ImageNameLowercase) $(AcrRepository)/$(ImageNameLowercase):$(Build.BuildNumber)'
          addPipelineData: false
       
       # use this debug acr firewall access
       #- bash: |
          #ifconfig -a
         #displayName: 'Display all IP configs on this machine'

       - task: AzureCLI@1
         displayName: 'Add build ip to acr firewall '
         inputs:
          azureSubscription: '7770e554-30b1-4187-b512-c68b0f1617b7'
          scriptLocation: inlineScript
          inlineScript: |

            source devops/common/commonfunctions.sh
            ip=$(dig +short myip.opendns.com @resolver1.opendns.com)
            #add_ip_address_in_acr_netwpork_rule 'acrdevavalancheglobal' $temp
            cd devops/resources
            sh add-acr-firewall-ip.sh  7770e554-30b1-4187-b512-c68b0f1617b7 'acrdevavalancheglobal' $ip

       - task: Docker@1
         displayName: 'Run a Docker command -Push'
         inputs:
          azureSubscriptionEndpoint: '7770e554-30b1-4187-b512-c68b0f1617b7'
          azureContainerRegistry: '$(AcrRepository)'
          command: 'Push an image'
          imageName: '$(AcrRepository)/$(ImageNameLowercase):$(Build.BuildNumber)'