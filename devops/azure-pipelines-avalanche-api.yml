name: avalanche-web-$(majorversion).$(minorversion).$(patch).$(releasestage)_$(majorversion).$(minorversion).$(Date:yyMM).$(Date:dd)$(Rev:rr)

trigger:
  - $(BranchTrigger)

variables:
  - group: vg_dev_avalanche_api
  #- template: pipeline-bug-workaround.yml

pool:
  vmImage: $(VmImage)

stages:
- stage: build
  jobs:
  - job: build_test_publish
    steps:
   

     - checkout: git://$(AdoProject)/$(Repo)@$(branch)
     - checkout: git://$(AdoProject)/$(RepoDevops)@$(BranchDevOps)
                 
     # use the following .net frameworks
     - template: 'templates/use-dotnet.yml'
       parameters:
        yesNo: false
     - task: UseDotNet@2
       displayName: 'use dotnet 3.1.x'
       inputs:
        version: '3.1.x'
        packageType: runtime
        
     - task: UseDotNet@2
       displayName: 'use dotnet 2.2.x'
       inputs:
        version: '2.2.x'
        packageType: runtime
     - task: Bash@3
       displayName: 'List dir of cheked out repos'
       inputs:
        targetType: 'inline'
        script: 'ls .'
        workingDirectory: '.'

     # sonar analysis step 1 of 3   
     - task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
       condition: and(succeeded(), eq(variables['Build.SourceBranchName'], '$(DefaultBranch)'))
       displayName: 'Prepare analysis on SonarQube'
       inputs:
          SonarQube: sonarqube
          projectKey: '$(Repo)'
          projectName: '$(Repo)'

     # build          
     - task: DotNetCoreCLI@2
       displayName: 'dotnet build'
       inputs:
        projects: '**/$(ProjectSolution)'
        #projects: $(Repo)/$(ProjectSolution)
        arguments: '--configuration=Avalanche-Api-Sonar'

     # test step 1 of 2
     - task: DotNetCoreCLI@2
       displayName: 'dotnet test'
       inputs:
        command: test
        projects: '**/$(TestProject)'
        #projects: $(Repo)/$(TestProject)
        testRunTitle: TestResults
        #workingDirectory: $(Repo)/Code/Avalanche.Api.Tests
     
     # test step 2 of 2
     - task: CopyFiles@2
       displayName: 'Copy Files to: $(Agent.BuildDirectory)\TestResults'
       inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: '*.trx'
        TargetFolder: '$(Agent.BuildDirectory)\TestResults'

     # sonar analysis step 2 of 3   
     - task: SonarQubeAnalyze@4
       condition: and(succeeded(), eq(variables['Build.SourceBranchName'], '$(DefaultBranch)'))

    # sonar analysis step 3 of 3   
     - task: SonarQubePublish@4
       condition: and(succeeded(), eq(variables['Build.SourceBranchName'], '$(DefaultBranch)'))
       inputs:
        pollingTimeoutSec: '300'

    # publish
     - task: DotNetCoreCLI@2
       displayName: 'Publish $(VSProject)'
       inputs:
        command: publish
        publishWebProjects: false
        projects: '**/$(VSProject)'
        #projects: '**/Code/Avalanche.Api/Avalanche.Api.csproj'
        arguments: '-c $(BuildConfiguration)  -o app'
        zipAfterPublish: false
        modifyOutputPath: false
 
    # store build output artiifcats
     - task: PublishBuildArtifacts@1
       displayName: 'Publish Build Artifacts'
       inputs:
        PathtoPublish: $(PathtoPublish)
        ArtifactName: $(PathtoPublish)


