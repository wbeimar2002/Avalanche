syntax = "proto3";
import "google/protobuf/empty.proto";

option csharp_namespace = "Ism.Recorder.Core.V1.Protos";

package recorder;

// The recorder service definition.
service Recorder {
	rpc StartRecording (RecordMessage) returns (google.protobuf.Empty);
	rpc StopRecording (google.protobuf.Empty) returns (google.protobuf.Empty);
	rpc PauseRecording (google.protobuf.Empty) returns (google.protobuf.Empty);
	rpc ResumeRecording (google.protobuf.Empty) returns (google.protobuf.Empty);
	rpc CaptureImage (CaptureImageRequest) returns (CaptureImageResponse);
	rpc StartPM (RecordMessage) returns (google.protobuf.Empty);
	rpc StopPM (google.protobuf.Empty) returns (google.protobuf.Empty);
	rpc SetRecordChannelEnabled (SetRecordChannelEnabledRequest) returns (google.protobuf.Empty);
	rpc SetRecordChannelsEnabled (SetRecordChannelsEnabledRequest) returns (google.protobuf.Empty);
	rpc ResetRecordingStartTime (google.protobuf.Empty) returns (google.protobuf.Empty);
	rpc ToggleRecordingChannel (ToggleRecordingChannelRequest) returns (google.protobuf.Empty);
	rpc ToggleRecording (google.protobuf.Empty) returns (google.protobuf.Empty);
}

//Type Messages
message RecordMessage {
	string libId = 1;
	string repositoryId = 2;
}


message AccessInfoMessage {
	string id = 1;
	string ip = 2;
	string userName = 3; 
	string applicationName = 4; 
	string machineName = 5;
	string details = 6;
}

message ClinicalInfoMessage {
	string accession = 1;
	FixedDateMessage dob = 2;
	string externalProcedureId = 3;
	PersonNameDataMessage patientName = 4;
	string scheduleId = 5;
	string sex = 6;
}

message FixedDateMessage {
	int32 year = 1;
	int32 month = 2;
	int32 day = 3;
}

message MovieMessage {
	string created = 1;
	string fileSaved = 2; 
	string thumbName = 3;
	string modality = 4;
	string relativePath = 5; 
	string description = 6;
	string stream = 7;
	double length = 8;
}

message PersonNameDataMessage {
	string firstName = 1;
	string lastName = 2;
	string login = 3;
}

message ProcedureDataMessage {
    string clinicalNote = 1;
    ProcedureIdMessage procedureIdMessage = 2;
    bool needAcknowledge = 3;
    string procedurePath = 4;
    repeated string additionalUsers = 5;
}

message ProcedureIdMessage {
	string libraryId = 1;
	string libraryName = 2;
	string volumeName = 3;
}

// Request Messages
message AddImageRequest {
	string imageName = 1;
	string movie = 2;
	int32 offset = 3;
	AccessInfoMessage AccessInfoMessage = 4;
}

message AddMobileCaptureVideoRequest {
	MovieMessage movie = 1;
}

message AddVideoRequest {
	MovieMessage movie = 1;
}

message CaptureImageRequest {
	RecordMessage record = 1;
	AccessInfoMessage accessInfoMessage = 2;
}

message CreateRecordingSessionRequest {
	ClinicalInfoMessage clinicalInfoMessage = 1;
	string xmlOrig = 2;
	string department = 3;
	AccessInfoMessage accessInfoMessage = 4;
}

message DeleteImageRequest {
	string imageName = 1; 
	AccessInfoMessage accessInfoMessage = 2;
}

message DeleteLastImageRequest {
	AccessInfoMessage accessInfoMessage = 2;
}

message DeleteVideoRequest {
	string video = 1; 
	AccessInfoMessage accessInfoMessage = 2;
}

message DiscardProcedureRequest {
	bool usb = 1;
	bool includePhi = 2;
	bool print = 3;
    AccessInfoMessage accessInfoMessage = 4;
}

message FinishProcedureRequest {
	bool usb = 1;
	bool includePhi = 2;
	bool print = 3;
    AccessInfoMessage accessInfoMessage = 4;
}

message SetAnnotationsRequest {
	map<string, string> annotations = 1;
}

message SetAutolabelOverridesRequest {
	repeated string commonLabels = 1;
	repeated string procedureTypeLabels = 2;
}

message SetImagesPrintStateRequest {
	repeated string imageNames = 1;
	string printState = 2;
	AccessInfoMessage accessInfoMessage = 3;
}

message SetRecordChannelEnabledRequest {
    string captureDeviceId = 1;
    bool enabled = 2;
}

message SetRecordChannelsEnabledRequest {
	map<string, bool> channelsToSet = 1;
}

message ToggleRecordingChannelRequest {
	string captureDeviceId = 1;
}

message UpdateClinicalInfoRequest {
    ClinicalInfoMessage clinicalInfoMessage = 1;
    AccessInfoMessage accessInfoMessage = 2;
}

message UpdateProcedureDataRequest {
    ProcedureDataMessage procedureDataMessage = 1;
    repeated string additionalUsers = 2;
    string department = 3;
    AccessInfoMessage accessInfoMessage = 4;
}

// Response Messages

message CaptureImageResponse {
	int32 captureImageResponseCode = 1;
}

message CreateRecordingSessionResponse {
    ProcedureIdMessage newProcedureId = 1;
}

message GetAutolabelOverridesResponse {
	 repeated string commonLabels = 1;
	 repeated string procedureTypeLabels = 2;
}
