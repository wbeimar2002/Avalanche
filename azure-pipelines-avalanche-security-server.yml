name: $(Date:yyyyMMdd)$(Rev:.rr)

trigger:
  - none

resources:
  repositories:
  
  - repository: avalanche-api
    type: git
    name: avalanche/avalanche-api
    ref: dev

  - repository: devops
    type: git
    name: avalanche/devops

pool:
  vmImage: 'ubuntu-latest'

variables:

  - template: pipeline-bug-workaround.yml
  - name: BuildConfiguration
    value: 'Release'

stages:
- stage: build
  jobs:
  - job: build_test_publish
    steps:

     - task: UseDotNet@2
       displayName: 'use dotnet 3.1.x'
       inputs:
        version: '3.1.x'
        packageType: runtime
        
     - task: UseDotNet@2
       displayName: 'use dotnet 2.2.x'
       inputs:
        version: '2.2.x'
        packageType: runtime
     
     - task: DotNetCoreCLI@2
       displayName: 'Restore Avalanche.Security.Serve'
       inputs:
        command: restore
        projects: '**/Code/Avalanche.Security.Server/Avalanche.Security.Server.csproj'
        vstsFeed: 'd61e3552-9162-4b94-9184-b843c159ef58'

     - task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
       displayName: 'Prepare analysis on SonarQube'
       inputs:
          SonarQube: sonarqube
          projectKey: 'avalanche-security-server'
          projectName: 'avalanche-security-server'
       condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))

     - task: DotNetCoreCLI@2
       displayName: 'dotnet build'
       inputs:
        projects: Code/Avalanche.Api.sln
        arguments: '--configuration=Avalanche-Security-Server-Sonar'
     
     - task: DotNetCoreCLI@2
       displayName: 'dotnet test'
       inputs:
        command: test
        projects: Code/Avalanche.Security.Server.Tests/Avalanche.Security.Server.Tests.csproj
        testRunTitle: TestResults
        workingDirectory: Code/Avalanche.Security.Server
        configuration: Avalanche-Security-Server-Sonar
        arguments: –collect:”Code Coverage” 

     - task: CopyFiles@2
       displayName: 'Copy Files to: $(Agent.BuildDirectory)\TestResults'
       inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: '*.trx'
        TargetFolder: '$(Agent.BuildDirectory)\TestResults'

     - task: SonarQubeAnalyze@4
       condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))
    
     - task: SonarQubePublish@4
       inputs:
        pollingTimeoutSec: '300'
       condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))

     - task: DotNetCoreCLI@2
       displayName: 'Publish Avalanche.Security.Server'
       inputs:
        command: publish
        publishWebProjects: false
        projects: '**/Code/Avalanche.Security.Server/Avalanche.Security.Server.csproj'
        arguments: '-c $(BuildConfiguration)  -o app'
        zipAfterPublish: false
        modifyOutputPath: false

     - task: PublishBuildArtifacts@1
       displayName: 'Publish Build Artifacts'
       inputs:
        PathtoPublish: 'app'
        ArtifactName: app 

- stage: dev
  
  jobs:
     - job: push
       
       variables:

       - template: vg-dev-avalanche-security-server.yml

       steps:  
       - checkout: avalanche-api
       - checkout: devops
       
       - bash: |
          ls  /home/vsts/work/1/s/avalanche-api/Code/Avalanche.Security.Server
          
       - task: DownloadBuildArtifacts@0
         displayName: 'Download Build Artifacts'
         inputs:
          artifactName: app
          downloadPath: '.'
          
       - powershell: |
          $temp = "$(ImageName)"
          $temp = $temp.ToLower()
          Write-Host "##vso[task.setvariable variable=ImageNameLowercase;]$temp"
         displayName: 'Set image name'
       - task: Docker@0
         displayName: 'Docker command -Build'
         inputs:
          action: 'Run a Docker command'
          customCommand: 'build -t $(ImageNameLowercase) . -f avalanche-api/Code/Avalanche.Security.Server/DokerfileForAdoPipeline' 

       - bash: |
          acrname='acr$(env)$(platform)global'
          echo 'target acr name' $acrname
          echo "##vso[task.setvariable variable=acrname]$acrname"
         displayName: 'Set acr name'

       - task: Docker@2
         displayName: 'Docker command -Tag'
         inputs:
          command: 'tag'
          arguments: '$(ImageNameLowercase) $(acrname).azurecr.io/$(ImageNameLowercase):$(Build.BuildNumber)'
          addPipelineData: false
       
       - bash: |
          source devops/common/commonfunctions.sh
          ip=$(get_ext_ip)
          echo 'build server external ip is ' $ip
          echo "##vso[task.setvariable variable=ip]$ip"
          echo 'variable ip ' $(ip)
         displayName: 'Get build server external ip'
       
       - task: AzureCLI@1
         displayName: 'Add build server external ip to acr firewall'
         inputs:
          azureSubscription: $(azuresubscription)
          scriptPath: 'devops/resources/add-acr-firewall-ip.sh'
          arguments: '$(azuresubscription) $(acrname) $(ip)'
       - task: Docker@1
         displayName: 'Run a Docker command -Push'
         inputs:
          azureSubscriptionEndpoint: '7770e554-30b1-4187-b512-c68b0f1617b7'
          azureContainerRegistry: 'acrdevavalancheglobal.azurecr.io'
          command: 'Push an image'
          imageName: 'acrdevavalancheglobal.azurecr.io/avalanche-security-server:$(Build.BuildNumber)'   
       #- task: Docker@1
         #displayName: 'Run a Docker command -Push'
        # inputs:
          #azureSubscriptionEndpoint: $(azuresubscription)
          #azureContainerRegistry: '$(acrname).azurecr.io'
          #command: 'Push an image'
          #imageName: '$(acrname).azurecr.io/$(ImageNameLowercase):$(Build.BuildNumber)'
          
       - task: AzureCLI@1
         displayName: 'Delete build server external ip from acr firewall'
         inputs:
          azureSubscription: $(azuresubscription)
          scriptPath: 'devops/resources/delete-acr-firewall-ip.sh'
          arguments: '$(azuresubscription) $(acrname) $(ip)'
          