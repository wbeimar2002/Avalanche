name: $(Date:yyyyMMdd)$(Rev:.rr)

trigger:
  - none

resources:
  repositories:
  
  - repository: avalanche-api
    type: git
    name: avalanche/avalanche-api
    ref: dev

  - repository: devops
    type: git
    name: avalanche/devops

pool:
  vmImage: 'ubuntu-latest'

variables:

  - template: pipeline-bug-workaround.yml
  - name: BuildConfiguration
    value: 'Release'

stages:
- stage: build
  jobs:
  - job: build_test_publish
    steps:

     - task: UseDotNet@2
       displayName: 'use dotnet 3.1.x'
       inputs:
        version: '3.1.x'
        packageType: runtime
        
     - task: UseDotNet@2
       displayName: 'use dotnet 2.2.x'
       inputs:
        version: '2.2.x'
        packageType: runtime
     
     - task: DotNetCoreCLI@2
       displayName: 'Restore Avalanche.Security.Serve'
       inputs:
        command: restore
        projects: '**/Code/Avalanche.Security.Server/Avalanche.Security.Server.csproj'
        vstsFeed: 'd61e3552-9162-4b94-9184-b843c159ef58'
    
     - task: DotNetCoreCLI@2
       displayName: 'Build Avalanche.Security.Serve'
       inputs:
        projects: '**/Code/Avalanche.Security.Server/Avalanche.Security.Server.csproj'
        arguments: '--configuration $(BuildConfiguration)'
     
     - task: DotNetCoreCLI@2
       displayName: 'Test Avalanche.Security.Server.Tests'
       inputs:
        command: test
        projects: 'Code/Avalanche.Security.Server.Tests/Avalanche.Security.Server.Tests.csproj'
        arguments: '--configuration $(buildConfiguration)'

     - task: DotNetCoreCLI@2
       displayName: 'Publish Avalanche.Security.Server'
       inputs:
        command: publish
        publishWebProjects: false
        projects: '**/Code/Avalanche.Security.Server/Avalanche.Security.Server.csproj'
        arguments: '-c $(BuildConfiguration)  -o app'
        zipAfterPublish: false
        modifyOutputPath: false

     - task: PublishBuildArtifacts@1
       displayName: 'Publish Build Artifacts'
       inputs:
        PathtoPublish: 'app'
        ArtifactName: app 

- stage: dev
  
  jobs:
     - job: push
       
       variables:

       - template: vg-dev-avalanche-api.yml

       steps:  
       - checkout: avalanche-api
       - checkout: devops
       
       - task: DownloadBuildArtifacts@0
         displayName: 'Download Build Artifacts'
         inputs:
          artifactName: app
          downloadPath: '.'
          
       - powershell: |
          $temp = "$(ImageName)"
          $temp = $temp.ToLower()
          Write-Host "##vso[task.setvariable variable=ImageNameLowercase;]$temp"
         displayName: 'Set image name'
       - task: Docker@0
         displayName: 'Docker command -Build'
         inputs:
          action: 'Run a Docker command'
          customCommand: 'build -t $(ImageNameLowercase) . -f **/Code/Avalanche.Security.Server/DokerfileForAdoPipeline' 